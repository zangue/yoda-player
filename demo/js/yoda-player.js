!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define([],U):"object"==typeof exports?exports.yoda=U():Q.yoda=U()}(self,(()=>(()=>{"use strict";var __webpack_modules__={292:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ManifestParser = void 0;\nconst parser_utils_1 = __webpack_require__(994);\nconst segment_index_1 = __webpack_require__(288);\nconst timer_1 = __webpack_require__(719);\nconst network_1 = __webpack_require__(433);\nconst types_1 = __webpack_require__(419);\n// type PeriodContext = {\n//   id: string;\n//   duration: number;\n// }\nvar SegmentIndexType;\n(function (SegmentIndexType) {\n    SegmentIndexType[SegmentIndexType[\"Base\"] = 0] = \"Base\";\n    SegmentIndexType[SegmentIndexType[\"Template\"] = 1] = \"Template\";\n    SegmentIndexType[SegmentIndexType[\"Timeline\"] = 2] = \"Timeline\";\n})(SegmentIndexType || (SegmentIndexType = {}));\n// TODO\n// Introduce |parseMandatoryAttr| utilities that will abort the parsing\n// operation in case a mandatory attribute is not provided.\n/**\n * A MPEG-DASH Manifest parser.\n *\n * The parser is tailored to consume Zattoo Live stream with respect of the\n * scope of the case study. MPEG-DASH feature beyond the scope of the case\n * study may not be supported.\n */\nclass ManifestParser {\n    constructor() {\n        this.manifestUrl_ = '';\n        this.manifest_ = null;\n        this.maxSegmentDuration_ = -1;\n        this.presentationType_ = types_1.StreamType.VOD;\n        this.presentationDuration_ = null;\n        this.minimumUpdatePeriod_ = -1;\n        this.streamMap_ = new Map();\n        this.globalId_ = 0;\n        this.refreshTimer_ = new timer_1.Timer(() => this.refreshManifest_());\n    }\n    /**\n     * Starts the parser. This method will load and parse the manifest.\n     *\n     * @param manifestUrl The manifest URL\n     * @returns Promise containing the parsed manifest.\n     */\n    start(manifestUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Manifest parser starts...');\n            this.manifestUrl_ = manifestUrl;\n            this.manifest_ = yield this.loadAndParseManifest_();\n            if (this.manifest_.type === types_1.StreamType.LIVE) {\n                this.refreshTimer_.tickAfter(this.manifest_.minUpdatePeriod);\n            }\n            return this.manifest_;\n        });\n    }\n    /**\n     * Stop parsing.\n     */\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Manifest parser stops...');\n            this.refreshTimer_.clear();\n            this.globalId_ = 0;\n            this.streamMap_.clear();\n            this.maxSegmentDuration_ = -1;\n        });\n    }\n    loadAndParseManifest_() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const req = new network_1.HttpRequest(this.manifestUrl_);\n            req.responseType = 'text';\n            const respone = yield network_1.NetworkHandle.fetch(req);\n            const mpd = parser_utils_1.ParserUtils.parseXml(respone.data);\n            if (!mpd) {\n                throw new Error('Invalid Manifest');\n            }\n            this.presentationDuration_ =\n                parser_utils_1.ParserUtils.parseIsoDuration(mpd.getAttribute('mediaPresentationDuration') || '') || null;\n            this.presentationType_ =\n                mpd.getAttribute('type') === 'dynamic' ? types_1.StreamType.LIVE : types_1.StreamType.VOD;\n            const minBufferTime = parser_utils_1.ParserUtils.parseIsoDuration(mpd.getAttribute('minBufferTime') || '') || -1;\n            const presentationStartTime = parser_utils_1.ParserUtils.parseDate(mpd.getAttribute('availabilityStartTime') || '') || 0;\n            const suggestedPresentationDelay = parser_utils_1.ParserUtils.parseIsoDuration(mpd.getAttribute('suggestedPresentationDelay') || '');\n            this.minimumUpdatePeriod_ =\n                parser_utils_1.ParserUtils.parseIsoDuration(mpd.getAttribute('minimumUpdatePeriod') || '') ||\n                    -1;\n            const dvrWindowLength = parser_utils_1.ParserUtils.parseIsoDuration(mpd.getAttribute('timeShiftBufferDepth') || '') ||\n                Infinity;\n            let presentationDelay = null;\n            const periodNodes = parser_utils_1.ParserUtils.getChildren(mpd, 'Period');\n            if (periodNodes.length === 0) {\n                console.error('No period found');\n                throw new Error('Invalid manifest: no period found');\n            }\n            if (periodNodes.length > 1) {\n                console.warn('Multi-period manifests not supported. ' +\n                    'Additional periods will be ignored...');\n            }\n            // Multi-period not supported yet!\n            const period = periodNodes[0];\n            const periodDuration = parser_utils_1.ParserUtils.parseIsoDuration(period.getAttribute('duration') || '') || null;\n            if (!this.presentationDuration_) {\n                if (periodDuration) {\n                    this.presentationDuration_ = periodDuration;\n                }\n                else if (this.presentationType_ === types_1.StreamType.LIVE) {\n                    this.presentationDuration_ = Number.MAX_SAFE_INTEGER;\n                }\n                else {\n                    throw new Error('Could not determine presentation duration!');\n                }\n            }\n            // TODO - Period might contain segment infos\n            const adaptationSetNodes = parser_utils_1.ParserUtils.getChildren(period, 'AdaptationSet');\n            adaptationSetNodes.forEach(this.parseAdaptationSet_.bind(this));\n            if (suggestedPresentationDelay) {\n                presentationDelay = suggestedPresentationDelay;\n            }\n            else {\n                console.assert(this.maxSegmentDuration_ > 0, 'Bug: Should have set max segment duration!');\n                presentationDelay = Math.round(this.maxSegmentDuration_ * 3);\n            }\n            const manifest = {\n                type: this.presentationType_,\n                startTime: presentationStartTime,\n                delay: presentationDelay,\n                duration: this.presentationDuration_,\n                dvrWindowLength,\n                minBufferTime,\n                minUpdatePeriod: this.minimumUpdatePeriod_,\n                maxSegmentDuration: this.maxSegmentDuration_,\n                video: this.streamMap_.get(types_1.MediaType.VIDEO) || [],\n                audio: this.streamMap_.get(types_1.MediaType.AUDIO) || [],\n            };\n            // We done parsing clear stream map\n            this.streamMap_.clear();\n            return manifest;\n        });\n    }\n    parseCommonAttributesAndElements_(elem) {\n        const width = Number(elem.getAttribute('width')) || null;\n        const height = Number(elem.getAttribute('height')) || null;\n        const frameRate = Number(elem.getAttribute('frameRate')) || null;\n        const mimeType = elem.getAttribute('mimeType') || '';\n        const codecs = elem.getAttribute('codecs') || '';\n        const samplingRate = Number(elem.getAttribute('samplingRate')) || null;\n        return {\n            width,\n            height,\n            frameRate,\n            mimeType,\n            codecs,\n            samplingRate,\n        };\n    }\n    parseAdaptationSet_(elem) {\n        const id = elem.getAttribute('id') || String(this.globalId_++);\n        const common = this.parseCommonAttributesAndElements_(elem);\n        const codecs = common.codecs;\n        const maxHeight = Number(elem.getAttribute('maxHeight'));\n        const maxWidth = Number(elem.getAttribute('maxWidth'));\n        const maxFrameRate = Number(elem.getAttribute('maxFrameRate'));\n        const maxBandwidth = Number(elem.getAttribute('maxBandwidth'));\n        let contentType = elem.getAttribute('contentType') ||\n            parser_utils_1.ParserUtils.getTypeFromMimeType(common.mimeType);\n        const segmentTemplate = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentTemplate');\n        const segmentBase = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentBase');\n        const segmentList = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentList');\n        if (segmentBase || segmentList) {\n            console.warn('Currently only SegmentTemplate is supported!');\n            return;\n        }\n        const getSegmentNode = () => {\n            if (segmentTemplate) {\n                return {\n                    node: segmentTemplate,\n                    indexType: SegmentIndexType.Template,\n                };\n            }\n            return null;\n        };\n        const representationNodes = parser_utils_1.ParserUtils.getChildren(elem, 'Representation');\n        const streams = [];\n        const context = {\n            id,\n            codecs,\n            contentType,\n            maxBandwidth,\n            maxFrameRate,\n            maxHeight,\n            maxWidth,\n            mimeType: common.mimeType,\n            segmentNode: getSegmentNode(),\n        };\n        for (const representationNode of representationNodes) {\n            const parsed = this.parseRepresentation_(representationNode, context);\n            if (parsed) {\n                streams.push(parsed);\n            }\n        }\n        if (streams.length < 1) {\n            console.error('Empty AdaptationSet!');\n            throw new Error(`Invalid manifest: no represenation found for ${contentType}`);\n        }\n        // Derive content type in case attribute not present at adaptation set level\n        contentType = contentType || context.contentType;\n        console.assert(contentType, 'Bug: Must have figured out content type by now.');\n        // We only support video and audio streams for now!\n        if (contentType === types_1.MediaType.AUDIO || contentType === types_1.MediaType.VIDEO) {\n            if (contentType && this.streamMap_.has(contentType)) {\n                console.warn('Multiple adaptation sets for same content type is not supported...');\n                return;\n            }\n            this.streamMap_.set(contentType, streams);\n        }\n        else {\n            console.warn(`Skipping unsupported type: ${contentType}`);\n        }\n    }\n    parseRepresentation_(elem, context) {\n        const originalId = elem.getAttribute('id') || '';\n        const common = this.parseCommonAttributesAndElements_(elem);\n        const bandwidth = Number(elem.getAttribute('bandwidth'));\n        const width = Number(elem.getAttribute('width')) || context.maxWidth;\n        const height = Number(elem.getAttribute('height')) || context.maxHeight;\n        const codecs = common.codecs || context.codecs;\n        const mimeType = common.mimeType || context.mimeType;\n        const frameRate = Number(elem.getAttribute('frameRate'));\n        let segmentTemplate = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentTemplate');\n        const segmentBase = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentBase');\n        const segmentList = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentList');\n        console.assert(mimeType, 'mimeType attribute is mandatory for represensations.');\n        if (context.segmentNode &&\n            context.segmentNode.indexType === SegmentIndexType.Template) {\n            segmentTemplate = segmentTemplate || context.segmentNode.node;\n        }\n        if (segmentBase || segmentList) {\n            console.warn('Currently only SegmentTemplate is supported!');\n            throw new Error('Unsupported segment index type.');\n        }\n        if (!segmentTemplate) {\n            console.error('No support for manifest type!');\n            throw new Error('Only DASH manifest with segment template are supported!');\n        }\n        if (!context.contentType) {\n            context.contentType = parser_utils_1.ParserUtils.getTypeFromMimeType(mimeType);\n        }\n        const rContext = {\n            id: originalId,\n            bandwidth,\n            adaptationSet: context,\n        };\n        const mediaData = this.parseSegmentTemplate_(segmentTemplate, rContext);\n        console.assert(mediaData.mediaSegments.length > 0, 'Should have parsed segments');\n        return {\n            // TODO\n            id: context.contentType +\n                '_' +\n                context.id +\n                '_' +\n                (originalId ? originalId : String(this.globalId_++)),\n            originalId,\n            type: context.contentType,\n            kbps: bandwidth / 1000,\n            width,\n            height,\n            frameRate,\n            codecs,\n            mimeType,\n            initialization: mediaData.initSegment,\n            segmentIndex: new segment_index_1.SegmentIndex(mediaData.mediaSegments),\n        };\n    }\n    parseSegmentTemplate_(elem, context) {\n        // Section 5.3.9.2.2\n        const presentationTimeOffset = Number(elem.getAttribute('presentationTimeOffset'));\n        const timescale = Number(elem.getAttribute('timescale')) || 1;\n        const segmentDuration = Number(elem.getAttribute('duration')) || -1;\n        const initialization = elem.getAttribute('initialization') || '';\n        const media = elem.getAttribute('media') || '';\n        const startNumber = Number(elem.getAttribute('startNumber')) || 1;\n        const segmentTimeline = parser_utils_1.ParserUtils.getFirstChild(elem, 'SegmentTimeline');\n        const mContext = {\n            startNumber,\n            segmentDuration,\n            timeOffset: presentationTimeOffset,\n            timescale,\n            initializationAttr: initialization,\n            mediaAttr: media,\n            representation: context,\n        };\n        // Segment template with timeline.\n        if (segmentTimeline) {\n            return this.createSegmentsFromTimeline_(segmentTimeline, mContext);\n        }\n        return this.createSegmentsFromTemplate_(mContext);\n    }\n    createSegmentsFromTemplate_(context) {\n        console.assert(context.segmentDuration > 0, 'Segment template without timeline should have segment duration');\n        if (!this.presentationDuration_) {\n            throw new Error('Missing presentation duration!');\n        }\n        const segments = [];\n        let position = context.startNumber;\n        const scaledSegmentDuration = context.segmentDuration / context.timescale;\n        let start = 0;\n        let end = scaledSegmentDuration;\n        // TODO\n        this.maxSegmentDuration_ = end - start;\n        while (end < this.presentationDuration_) {\n            const unscaledStart = start * context.timescale;\n            const unscaledEnd = end * context.timescale;\n            segments.push({\n                start,\n                end,\n                duration: end - start,\n                unscaledStart,\n                unscaledEnd,\n                unscaledDuration: unscaledEnd - unscaledStart,\n                isInit: false,\n                url: parser_utils_1.ParserUtils.resolveTemplateUrl(context.mediaAttr, {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth,\n                    time: unscaledStart,\n                    number: position,\n                }, this.manifestUrl_),\n            });\n            start = end;\n            end = Math.min(this.presentationDuration_, end + scaledSegmentDuration);\n            ++position;\n        }\n        console.assert(segments.length > 0, 'Should have segments!!!');\n        return {\n            initSegment: {\n                start: 0,\n                end: 0,\n                duration: 0,\n                unscaledStart: 0,\n                unscaledEnd: 0,\n                unscaledDuration: 0,\n                isInit: true,\n                url: parser_utils_1.ParserUtils.resolveTemplateUrl(context.initializationAttr, // Init Url template\n                {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth,\n                }, this.manifestUrl_),\n            },\n            mediaSegments: segments,\n        };\n    }\n    createSegmentsFromTimeline_(elem, context) {\n        // MPEG-DASH Section 5.3.9.6\n        const sNodes = parser_utils_1.ParserUtils.getChildren(elem, 'S');\n        const mediaSegments = [];\n        for (let i = 0; i < sNodes.length; i++) {\n            const sNode = sNodes[i];\n            const d = Number(sNode.getAttribute('d'));\n            let r = Number(sNode.getAttribute('r'));\n            let t = null;\n            let scaledT = null;\n            const scaledD = d / context.timescale;\n            // TODO - Assert has duration\n            if (sNode.hasAttribute('t')) {\n                // The value of the @t attribute minus the value of the\n                // @presentationTimeOffset specifies the MPD start time of the first\n                // Segment in the series.\n                t = Number(sNode.getAttribute('t')) - context.timeOffset;\n            }\n            else if (mediaSegments.length === 0) {\n                // If @t not present, then the value shall be assumed zero for the\n                // first S element.\n                t = 0;\n            }\n            else {\n                // If @t not present, and not the first S element then the value\n                // shall be assumed to be the sum of the previous S element's earliest\n                // presentation time and contiguous duration i.e. end time for previous\n                // segment.\n                const lastSegment = mediaSegments[mediaSegments.length - 1];\n                t = lastSegment.unscaledStart + lastSegment.unscaledDuration;\n            }\n            const unscaledEnd = t + d;\n            scaledT = t / context.timescale;\n            // TODO - Check for discontinuity\n            if (this.maxSegmentDuration_ < scaledD) {\n                this.maxSegmentDuration_ = scaledD;\n            }\n            mediaSegments.push({\n                start: scaledT,\n                end: unscaledEnd / context.timescale,\n                duration: scaledD,\n                unscaledStart: t,\n                unscaledEnd,\n                unscaledDuration: d,\n                isInit: false,\n                url: parser_utils_1.ParserUtils.resolveTemplateUrl(context.mediaAttr, // url template\n                {\n                    bandwidth: context.representation.bandwidth,\n                    time: t,\n                    representationId: context.representation.id,\n                }, this.manifestUrl_),\n            });\n            // The value of the @r attribute of the S element may be set to a\n            // negative value indicating that the duration indicated in @d is promised\n            // to repeat until the S@t of the next S element or if it is the\n            // last S element in the SegmentTimeline element until the end of the\n            // Period or the next update of the MPD, i.e. it is treated in the same\n            // way as the @duration attribute for a full period.\n            if (r < 0) {\n                console.assert(scaledT, 'Bug: Should scaled start time');\n                const nextS = sNodes[i + 1];\n                const isLastS = typeof nextS === 'undefined';\n                let endTime = -1;\n                if (isLastS) {\n                    // TODO\n                    // Pass period context. Currently we only support single period so,\n                    // period duration is presentation duration\n                    const periodEndTime = this.presentationDuration_ || t; //TODO\n                    const nextUpdateTime = t + this.minimumUpdatePeriod_;\n                    const isLive = this.presentationDuration_ === types_1.StreamType.LIVE;\n                    endTime = isLive ? nextUpdateTime : periodEndTime;\n                }\n                else {\n                    if (nextS.hasAttribute('t')) {\n                        endTime = Number(nextS.getAttribute('t')) - context.timeOffset;\n                    }\n                    else {\n                        throw new Error('Parser: next S element is missing @t attribute.');\n                    }\n                }\n                console.assert(endTime >= scaledT, 'Bug: could not compute segments for negative repeat count');\n                r = Math.ceil((endTime - scaledT) / scaledD);\n            }\n            if (r > 0) {\n                for (let i = 0; i <= r; i++) {\n                    const lastSegment = mediaSegments[mediaSegments.length - 1];\n                    const nextStartUnscaled = lastSegment.unscaledEnd;\n                    const nextEndUnscaled = nextStartUnscaled + d;\n                    mediaSegments.push({\n                        start: lastSegment.end,\n                        end: nextEndUnscaled / context.timescale,\n                        duration: scaledD,\n                        unscaledStart: nextStartUnscaled,\n                        unscaledEnd: nextEndUnscaled,\n                        unscaledDuration: d,\n                        isInit: false,\n                        url: parser_utils_1.ParserUtils.resolveTemplateUrl(context.mediaAttr, {\n                            bandwidth: context.representation.bandwidth,\n                            time: nextStartUnscaled,\n                            representationId: context.representation.id,\n                        }, this.manifestUrl_),\n                    });\n                }\n            }\n        }\n        return {\n            initSegment: {\n                start: 0,\n                end: 0,\n                duration: 0,\n                unscaledStart: 0,\n                unscaledEnd: 0,\n                unscaledDuration: 0,\n                isInit: true,\n                url: parser_utils_1.ParserUtils.resolveTemplateUrl(context.initializationAttr, // Init Url template\n                {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth,\n                }, this.manifestUrl_),\n            },\n            mediaSegments,\n        };\n    }\n    refreshManifest_() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.manifest_)\n                return;\n            console.log('Refreshing manifest...');\n            try {\n                const newManifest = yield this.loadAndParseManifest_();\n                // TODO\n                this.manifest_.dvrWindowLength = newManifest.dvrWindowLength;\n                this.manifest_.minUpdatePeriod = newManifest.minUpdatePeriod;\n                // Update streams\n                if (this.manifest_.video && newManifest.video) {\n                    this.updateStreams_(this.manifest_.video, newManifest.video, this.manifest_.dvrWindowLength);\n                }\n                if (this.manifest_.audio && newManifest.audio) {\n                    this.updateStreams_(this.manifest_.audio, newManifest.audio, this.manifest_.dvrWindowLength);\n                }\n                // TODO: Notify new manifest?\n                // Schedule next update\n                this.refreshTimer_.tickAfter(this.manifest_.minUpdatePeriod);\n            }\n            catch (error) {\n                console.error('Failed to refresh manifest, retrying...', error);\n                // Retry\n                this.refreshTimer_.tickAfter(0);\n            }\n        });\n    }\n    updateStreams_(oldStreams, newStreams, dvrWindowLength) {\n        console.assert(oldStreams.length === newStreams.length, 'Stream count missmatch after manifest update!');\n        // TODO\n        // Improve the stream mapping. For simplicity sake we will assume, for\n        // now, that streams appears in each manifest in the same order and\n        // in the same amount i.e. we assume an 1:1 mapping with the new\n        // manifest.\n        for (let i = 0; i < oldStreams.length; i++) {\n            const newSegments = newStreams[i].segmentIndex.getSegments();\n            oldStreams[i].segmentIndex.merge(newSegments);\n            // Adjust DVR window\n            if (dvrWindowLength) {\n                oldStreams[i].segmentIndex.adjustDvrWindow(dvrWindowLength);\n            }\n        }\n    }\n}\nexports.ManifestParser = ManifestParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRTtZQUMxQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRTdELFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTlDLG9CQUFvQjtZQUNwQixJQUFJLGVBQWUsRUFBRTtnQkFDbkIsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDN0Q7U0FDRjtJQUNILENBQUM7Q0FDRjtBQXpvQkQsd0NBeW9CQyIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZGEvLi9zcmMvZGFzaC9tYW5pZmVzdC1wYXJzZXIudHM/NTY5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BhcnNlclV0aWxzIGFzIFV0aWxzfSBmcm9tICcuL3BhcnNlci11dGlscyc7XG5pbXBvcnQge1NlZ21lbnRJbmRleH0gZnJvbSAnLi9zZWdtZW50LWluZGV4JztcbmltcG9ydCB7VGltZXJ9IGZyb20gJy4uL3V0aWxzL3RpbWVyJztcbmltcG9ydCB7TmV0d29ya0hhbmRsZSwgSHR0cFJlcXVlc3R9IGZyb20gJy4uL3V0aWxzL25ldHdvcmsnO1xuaW1wb3J0IHtJVGltZXJ9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcbmltcG9ydCB7XG4gIElTZWdtZW50LFxuICBJUmVwcmVzZW50YXRpb24sXG4gIElNYW5pZmVzdCxcbiAgSU1hbmlmZXN0UGFyc2VyLFxuICBNZWRpYVR5cGUsXG4gIFN0cmVhbVR5cGUsXG59IGZyb20gJy4vdHlwZXMnO1xuXG4vLyB0eXBlIFBlcmlvZENvbnRleHQgPSB7XG4vLyAgIGlkOiBzdHJpbmc7XG4vLyAgIGR1cmF0aW9uOiBudW1iZXI7XG4vLyB9XG5cbmVudW0gU2VnbWVudEluZGV4VHlwZSB7XG4gIEJhc2UsXG4gIFRlbXBsYXRlLFxuICBUaW1lbGluZSxcbn1cblxudHlwZSBDb21tb25BdHRyaWJ1dGVzQW5kRWxlbWVudHMgPSB7XG4gIHdpZHRoOiBudW1iZXIgfCBudWxsO1xuICBoZWlnaHQ6IG51bWJlciB8IG51bGw7XG4gIGZyYW1lUmF0ZTogbnVtYmVyIHwgbnVsbDtcbiAgbWltZVR5cGU6IHN0cmluZztcbiAgY29kZWNzOiBzdHJpbmc7XG4gIHNhbXBsaW5nUmF0ZTogbnVtYmVyIHwgbnVsbDtcbn07XG5cbnR5cGUgQWRhcHRhdGlvblNldENvbnRleHQgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG4gIGNvZGVjczogc3RyaW5nO1xuICBtYXhIZWlnaHQ6IG51bWJlcjtcbiAgbWF4V2lkdGg6IG51bWJlcjtcbiAgbWF4RnJhbWVSYXRlOiBudW1iZXI7XG4gIG1heEJhbmR3aWR0aDogbnVtYmVyO1xuICBtaW1lVHlwZTogc3RyaW5nO1xuICBzZWdtZW50Tm9kZToge1xuICAgIG5vZGU6IEVsZW1lbnQ7XG4gICAgaW5kZXhUeXBlOiBTZWdtZW50SW5kZXhUeXBlO1xuICB9IHwgbnVsbDtcbn07XG5cbnR5cGUgUmVwcmVzZW50YXRpb25Db250ZXh0ID0ge1xuICBpZDogc3RyaW5nO1xuICBiYW5kd2lkdGg6IG51bWJlcjtcbiAgYWRhcHRhdGlvblNldDogQWRhcHRhdGlvblNldENvbnRleHQ7XG59O1xuXG50eXBlIE1lZGlhRGF0YUNvbnRleHQgPSB7XG4gIHN0YXJ0TnVtYmVyOiBudW1iZXI7XG4gIHNlZ21lbnREdXJhdGlvbjogbnVtYmVyO1xuICB0aW1lT2Zmc2V0OiBudW1iZXI7XG4gIHRpbWVzY2FsZTogbnVtYmVyO1xuICBpbml0aWFsaXphdGlvbkF0dHI6IHN0cmluZztcbiAgbWVkaWFBdHRyOiBzdHJpbmc7XG4gIHJlcHJlc2VudGF0aW9uOiBSZXByZXNlbnRhdGlvbkNvbnRleHQ7XG59O1xuXG50eXBlIEFsbFNlZ21lbnRzID0ge1xuICBpbml0U2VnbWVudDogSVNlZ21lbnQ7XG4gIG1lZGlhU2VnbWVudHM6IElTZWdtZW50W107XG59O1xuXG4vLyBUT0RPXG4vLyBJbnRyb2R1Y2UgfHBhcnNlTWFuZGF0b3J5QXR0cnwgdXRpbGl0aWVzIHRoYXQgd2lsbCBhYm9ydCB0aGUgcGFyc2luZ1xuLy8gb3BlcmF0aW9uIGluIGNhc2UgYSBtYW5kYXRvcnkgYXR0cmlidXRlIGlzIG5vdCBwcm92aWRlZC5cblxuLyoqXG4gKiBBIE1QRUctREFTSCBNYW5pZmVzdCBwYXJzZXIuXG4gKlxuICogVGhlIHBhcnNlciBpcyB0YWlsb3JlZCB0byBjb25zdW1lIFphdHRvbyBMaXZlIHN0cmVhbSB3aXRoIHJlc3BlY3Qgb2YgdGhlXG4gKiBzY29wZSBvZiB0aGUgY2FzZSBzdHVkeS4gTVBFRy1EQVNIIGZlYXR1cmUgYmV5b25kIHRoZSBzY29wZSBvZiB0aGUgY2FzZVxuICogc3R1ZHkgbWF5IG5vdCBiZSBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYW5pZmVzdFBhcnNlciBpbXBsZW1lbnRzIElNYW5pZmVzdFBhcnNlciB7XG4gIHByaXZhdGUgbWFuaWZlc3RVcmxfOiBzdHJpbmc7XG4gIHByaXZhdGUgbWFuaWZlc3RfOiBJTWFuaWZlc3QgfCBudWxsO1xuICBwcml2YXRlIG1heFNlZ21lbnREdXJhdGlvbl86IG51bWJlcjtcbiAgcHJpdmF0ZSBtaW5pbXVtVXBkYXRlUGVyaW9kXzogbnVtYmVyO1xuICBwcml2YXRlIHByZXNlbnRhdGlvblR5cGVfOiBTdHJlYW1UeXBlO1xuICBwcml2YXRlIHByZXNlbnRhdGlvbkR1cmF0aW9uXzogbnVtYmVyIHwgbnVsbDtcbiAgcHJpdmF0ZSBzdHJlYW1NYXBfOiBNYXA8TWVkaWFUeXBlLCBJUmVwcmVzZW50YXRpb25bXT47XG4gIHByaXZhdGUgZ2xvYmFsSWRfOiAwO1xuICBwcml2YXRlIHJlZnJlc2hUaW1lcl86IElUaW1lcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1hbmlmZXN0VXJsXyA9ICcnO1xuICAgIHRoaXMubWFuaWZlc3RfID0gbnVsbDtcbiAgICB0aGlzLm1heFNlZ21lbnREdXJhdGlvbl8gPSAtMTtcbiAgICB0aGlzLnByZXNlbnRhdGlvblR5cGVfID0gU3RyZWFtVHlwZS5WT0Q7XG4gICAgdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8gPSBudWxsO1xuICAgIHRoaXMubWluaW11bVVwZGF0ZVBlcmlvZF8gPSAtMTtcbiAgICB0aGlzLnN0cmVhbU1hcF8gPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5nbG9iYWxJZF8gPSAwO1xuICAgIHRoaXMucmVmcmVzaFRpbWVyXyA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLnJlZnJlc2hNYW5pZmVzdF8oKSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBwYXJzZXIuIFRoaXMgbWV0aG9kIHdpbGwgbG9hZCBhbmQgcGFyc2UgdGhlIG1hbmlmZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gbWFuaWZlc3RVcmwgVGhlIG1hbmlmZXN0IFVSTFxuICAgKiBAcmV0dXJucyBQcm9taXNlIGNvbnRhaW5pbmcgdGhlIHBhcnNlZCBtYW5pZmVzdC5cbiAgICovXG4gIGFzeW5jIHN0YXJ0KG1hbmlmZXN0VXJsOiBzdHJpbmcpOiBQcm9taXNlPElNYW5pZmVzdD4ge1xuICAgIGNvbnNvbGUubG9nKCdNYW5pZmVzdCBwYXJzZXIgc3RhcnRzLi4uJyk7XG5cbiAgICB0aGlzLm1hbmlmZXN0VXJsXyA9IG1hbmlmZXN0VXJsO1xuXG4gICAgdGhpcy5tYW5pZmVzdF8gPSBhd2FpdCB0aGlzLmxvYWRBbmRQYXJzZU1hbmlmZXN0XygpO1xuXG4gICAgaWYgKHRoaXMubWFuaWZlc3RfLnR5cGUgPT09IFN0cmVhbVR5cGUuTElWRSkge1xuICAgICAgdGhpcy5yZWZyZXNoVGltZXJfLnRpY2tBZnRlcih0aGlzLm1hbmlmZXN0Xy5taW5VcGRhdGVQZXJpb2QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1hbmlmZXN0XztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHBhcnNpbmcuXG4gICAqL1xuICBhc3luYyBzdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnNvbGUubG9nKCdNYW5pZmVzdCBwYXJzZXIgc3RvcHMuLi4nKTtcbiAgICB0aGlzLnJlZnJlc2hUaW1lcl8uY2xlYXIoKTtcbiAgICB0aGlzLmdsb2JhbElkXyA9IDA7XG4gICAgdGhpcy5zdHJlYW1NYXBfLmNsZWFyKCk7XG4gICAgdGhpcy5tYXhTZWdtZW50RHVyYXRpb25fID0gLTE7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGxvYWRBbmRQYXJzZU1hbmlmZXN0XygpOiBQcm9taXNlPElNYW5pZmVzdD4ge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBIdHRwUmVxdWVzdCh0aGlzLm1hbmlmZXN0VXJsXyk7XG4gICAgcmVxLnJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcblxuICAgIGNvbnN0IHJlc3BvbmUgPSBhd2FpdCBOZXR3b3JrSGFuZGxlLmZldGNoKHJlcSk7XG4gICAgY29uc3QgbXBkID0gVXRpbHMucGFyc2VYbWwocmVzcG9uZS5kYXRhIGFzIHN0cmluZyk7XG5cbiAgICBpZiAoIW1wZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIE1hbmlmZXN0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8gPVxuICAgICAgVXRpbHMucGFyc2VJc29EdXJhdGlvbihcbiAgICAgICAgbXBkLmdldEF0dHJpYnV0ZSgnbWVkaWFQcmVzZW50YXRpb25EdXJhdGlvbicpIHx8ICcnXG4gICAgICApIHx8IG51bGw7XG4gICAgdGhpcy5wcmVzZW50YXRpb25UeXBlXyA9XG4gICAgICBtcGQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdkeW5hbWljJyA/IFN0cmVhbVR5cGUuTElWRSA6IFN0cmVhbVR5cGUuVk9EO1xuICAgIGNvbnN0IG1pbkJ1ZmZlclRpbWUgPVxuICAgICAgVXRpbHMucGFyc2VJc29EdXJhdGlvbihtcGQuZ2V0QXR0cmlidXRlKCdtaW5CdWZmZXJUaW1lJykgfHwgJycpIHx8IC0xO1xuICAgIGNvbnN0IHByZXNlbnRhdGlvblN0YXJ0VGltZSA9XG4gICAgICBVdGlscy5wYXJzZURhdGUobXBkLmdldEF0dHJpYnV0ZSgnYXZhaWxhYmlsaXR5U3RhcnRUaW1lJykgfHwgJycpIHx8IDA7XG4gICAgY29uc3Qgc3VnZ2VzdGVkUHJlc2VudGF0aW9uRGVsYXkgPSBVdGlscy5wYXJzZUlzb0R1cmF0aW9uKFxuICAgICAgbXBkLmdldEF0dHJpYnV0ZSgnc3VnZ2VzdGVkUHJlc2VudGF0aW9uRGVsYXknKSB8fCAnJ1xuICAgICk7XG4gICAgdGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kXyA9XG4gICAgICBVdGlscy5wYXJzZUlzb0R1cmF0aW9uKG1wZC5nZXRBdHRyaWJ1dGUoJ21pbmltdW1VcGRhdGVQZXJpb2QnKSB8fCAnJykgfHxcbiAgICAgIC0xO1xuICAgIGNvbnN0IGR2cldpbmRvd0xlbmd0aCA9XG4gICAgICBVdGlscy5wYXJzZUlzb0R1cmF0aW9uKG1wZC5nZXRBdHRyaWJ1dGUoJ3RpbWVTaGlmdEJ1ZmZlckRlcHRoJykgfHwgJycpIHx8XG4gICAgICBJbmZpbml0eTtcbiAgICBsZXQgcHJlc2VudGF0aW9uRGVsYXkgPSBudWxsO1xuXG4gICAgY29uc3QgcGVyaW9kTm9kZXMgPSBVdGlscy5nZXRDaGlsZHJlbihtcGQsICdQZXJpb2QnKTtcblxuICAgIGlmIChwZXJpb2ROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHBlcmlvZCBmb3VuZCcpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hbmlmZXN0OiBubyBwZXJpb2QgZm91bmQnKTtcbiAgICB9XG5cbiAgICBpZiAocGVyaW9kTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnTXVsdGktcGVyaW9kIG1hbmlmZXN0cyBub3Qgc3VwcG9ydGVkLiAnICtcbiAgICAgICAgICAnQWRkaXRpb25hbCBwZXJpb2RzIHdpbGwgYmUgaWdub3JlZC4uLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gTXVsdGktcGVyaW9kIG5vdCBzdXBwb3J0ZWQgeWV0IVxuICAgIGNvbnN0IHBlcmlvZCA9IHBlcmlvZE5vZGVzWzBdO1xuICAgIGNvbnN0IHBlcmlvZER1cmF0aW9uID1cbiAgICAgIFV0aWxzLnBhcnNlSXNvRHVyYXRpb24ocGVyaW9kLmdldEF0dHJpYnV0ZSgnZHVyYXRpb24nKSB8fCAnJykgfHwgbnVsbDtcblxuICAgIGlmICghdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8pIHtcbiAgICAgIGlmIChwZXJpb2REdXJhdGlvbikge1xuICAgICAgICB0aGlzLnByZXNlbnRhdGlvbkR1cmF0aW9uXyA9IHBlcmlvZER1cmF0aW9uO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXNlbnRhdGlvblR5cGVfID09PSBTdHJlYW1UeXBlLkxJVkUpIHtcbiAgICAgICAgdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8gPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSBwcmVzZW50YXRpb24gZHVyYXRpb24hJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETyAtIFBlcmlvZCBtaWdodCBjb250YWluIHNlZ21lbnQgaW5mb3NcblxuICAgIGNvbnN0IGFkYXB0YXRpb25TZXROb2RlcyA9IFV0aWxzLmdldENoaWxkcmVuKHBlcmlvZCwgJ0FkYXB0YXRpb25TZXQnKTtcblxuICAgIGFkYXB0YXRpb25TZXROb2Rlcy5mb3JFYWNoKHRoaXMucGFyc2VBZGFwdGF0aW9uU2V0Xy5iaW5kKHRoaXMpKTtcblxuICAgIGlmIChzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheSkge1xuICAgICAgcHJlc2VudGF0aW9uRGVsYXkgPSBzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5hc3NlcnQoXG4gICAgICAgIHRoaXMubWF4U2VnbWVudER1cmF0aW9uXyA+IDAsXG4gICAgICAgICdCdWc6IFNob3VsZCBoYXZlIHNldCBtYXggc2VnbWVudCBkdXJhdGlvbiEnXG4gICAgICApO1xuICAgICAgcHJlc2VudGF0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKHRoaXMubWF4U2VnbWVudER1cmF0aW9uXyAqIDMpO1xuICAgIH1cblxuICAgIGNvbnN0IG1hbmlmZXN0OiBJTWFuaWZlc3QgPSB7XG4gICAgICB0eXBlOiB0aGlzLnByZXNlbnRhdGlvblR5cGVfLFxuICAgICAgc3RhcnRUaW1lOiBwcmVzZW50YXRpb25TdGFydFRpbWUsXG4gICAgICBkZWxheTogcHJlc2VudGF0aW9uRGVsYXksXG4gICAgICBkdXJhdGlvbjogdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8sXG4gICAgICBkdnJXaW5kb3dMZW5ndGgsXG4gICAgICBtaW5CdWZmZXJUaW1lLFxuICAgICAgbWluVXBkYXRlUGVyaW9kOiB0aGlzLm1pbmltdW1VcGRhdGVQZXJpb2RfLFxuICAgICAgbWF4U2VnbWVudER1cmF0aW9uOiB0aGlzLm1heFNlZ21lbnREdXJhdGlvbl8sXG4gICAgICB2aWRlbzogdGhpcy5zdHJlYW1NYXBfLmdldChNZWRpYVR5cGUuVklERU8pIHx8IFtdLFxuICAgICAgYXVkaW86IHRoaXMuc3RyZWFtTWFwXy5nZXQoTWVkaWFUeXBlLkFVRElPKSB8fCBbXSxcbiAgICB9O1xuXG4gICAgLy8gV2UgZG9uZSBwYXJzaW5nIGNsZWFyIHN0cmVhbSBtYXBcbiAgICB0aGlzLnN0cmVhbU1hcF8uY2xlYXIoKTtcblxuICAgIHJldHVybiBtYW5pZmVzdDtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VDb21tb25BdHRyaWJ1dGVzQW5kRWxlbWVudHNfKFxuICAgIGVsZW06IEVsZW1lbnRcbiAgKTogQ29tbW9uQXR0cmlidXRlc0FuZEVsZW1lbnRzIHtcbiAgICBjb25zdCB3aWR0aCA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSkgfHwgbnVsbDtcbiAgICBjb25zdCBoZWlnaHQgPSBOdW1iZXIoZWxlbS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpKSB8fCBudWxsO1xuICAgIGNvbnN0IGZyYW1lUmF0ZSA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnZnJhbWVSYXRlJykpIHx8IG51bGw7XG4gICAgY29uc3QgbWltZVR5cGUgPSBlbGVtLmdldEF0dHJpYnV0ZSgnbWltZVR5cGUnKSB8fCAnJztcbiAgICBjb25zdCBjb2RlY3MgPSBlbGVtLmdldEF0dHJpYnV0ZSgnY29kZWNzJykgfHwgJyc7XG4gICAgY29uc3Qgc2FtcGxpbmdSYXRlID0gTnVtYmVyKGVsZW0uZ2V0QXR0cmlidXRlKCdzYW1wbGluZ1JhdGUnKSkgfHwgbnVsbDtcblxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGZyYW1lUmF0ZSxcbiAgICAgIG1pbWVUeXBlLFxuICAgICAgY29kZWNzLFxuICAgICAgc2FtcGxpbmdSYXRlLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHBhcnNlQWRhcHRhdGlvblNldF8oZWxlbTogRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgU3RyaW5nKHRoaXMuZ2xvYmFsSWRfKyspO1xuICAgIGNvbnN0IGNvbW1vbiA9IHRoaXMucGFyc2VDb21tb25BdHRyaWJ1dGVzQW5kRWxlbWVudHNfKGVsZW0pO1xuICAgIGNvbnN0IGNvZGVjcyA9IGNvbW1vbi5jb2RlY3M7XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gTnVtYmVyKGVsZW0uZ2V0QXR0cmlidXRlKCdtYXhIZWlnaHQnKSk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBOdW1iZXIoZWxlbS5nZXRBdHRyaWJ1dGUoJ21heFdpZHRoJykpO1xuICAgIGNvbnN0IG1heEZyYW1lUmF0ZSA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnbWF4RnJhbWVSYXRlJykpO1xuICAgIGNvbnN0IG1heEJhbmR3aWR0aCA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnbWF4QmFuZHdpZHRoJykpO1xuICAgIGxldCBjb250ZW50VHlwZSA9XG4gICAgICBlbGVtLmdldEF0dHJpYnV0ZSgnY29udGVudFR5cGUnKSB8fFxuICAgICAgVXRpbHMuZ2V0VHlwZUZyb21NaW1lVHlwZShjb21tb24ubWltZVR5cGUpO1xuICAgIGNvbnN0IHNlZ21lbnRUZW1wbGF0ZSA9IFV0aWxzLmdldEZpcnN0Q2hpbGQoZWxlbSwgJ1NlZ21lbnRUZW1wbGF0ZScpO1xuICAgIGNvbnN0IHNlZ21lbnRCYXNlID0gVXRpbHMuZ2V0Rmlyc3RDaGlsZChlbGVtLCAnU2VnbWVudEJhc2UnKTtcbiAgICBjb25zdCBzZWdtZW50TGlzdCA9IFV0aWxzLmdldEZpcnN0Q2hpbGQoZWxlbSwgJ1NlZ21lbnRMaXN0Jyk7XG5cbiAgICBpZiAoc2VnbWVudEJhc2UgfHwgc2VnbWVudExpc3QpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ3VycmVudGx5IG9ubHkgU2VnbWVudFRlbXBsYXRlIGlzIHN1cHBvcnRlZCEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRTZWdtZW50Tm9kZSA9ICgpID0+IHtcbiAgICAgIGlmIChzZWdtZW50VGVtcGxhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBzZWdtZW50VGVtcGxhdGUsXG4gICAgICAgICAgaW5kZXhUeXBlOiBTZWdtZW50SW5kZXhUeXBlLlRlbXBsYXRlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlcHJlc2VudGF0aW9uTm9kZXMgPSBVdGlscy5nZXRDaGlsZHJlbihlbGVtLCAnUmVwcmVzZW50YXRpb24nKTtcbiAgICBjb25zdCBzdHJlYW1zID0gW107XG5cbiAgICBjb25zdCBjb250ZXh0OiBBZGFwdGF0aW9uU2V0Q29udGV4dCA9IHtcbiAgICAgIGlkLFxuICAgICAgY29kZWNzLFxuICAgICAgY29udGVudFR5cGUsXG4gICAgICBtYXhCYW5kd2lkdGgsXG4gICAgICBtYXhGcmFtZVJhdGUsXG4gICAgICBtYXhIZWlnaHQsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIG1pbWVUeXBlOiBjb21tb24ubWltZVR5cGUsXG4gICAgICBzZWdtZW50Tm9kZTogZ2V0U2VnbWVudE5vZGUoKSxcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCByZXByZXNlbnRhdGlvbk5vZGUgb2YgcmVwcmVzZW50YXRpb25Ob2Rlcykge1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5wYXJzZVJlcHJlc2VudGF0aW9uXyhyZXByZXNlbnRhdGlvbk5vZGUsIGNvbnRleHQpO1xuXG4gICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgIHN0cmVhbXMucHVzaChwYXJzZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1zLmxlbmd0aCA8IDEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0VtcHR5IEFkYXB0YXRpb25TZXQhJyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIG1hbmlmZXN0OiBubyByZXByZXNlbmF0aW9uIGZvdW5kIGZvciAke2NvbnRlbnRUeXBlfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRGVyaXZlIGNvbnRlbnQgdHlwZSBpbiBjYXNlIGF0dHJpYnV0ZSBub3QgcHJlc2VudCBhdCBhZGFwdGF0aW9uIHNldCBsZXZlbFxuICAgIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgfHwgY29udGV4dC5jb250ZW50VHlwZTtcblxuICAgIGNvbnNvbGUuYXNzZXJ0KFxuICAgICAgY29udGVudFR5cGUsXG4gICAgICAnQnVnOiBNdXN0IGhhdmUgZmlndXJlZCBvdXQgY29udGVudCB0eXBlIGJ5IG5vdy4nXG4gICAgKTtcblxuICAgIC8vIFdlIG9ubHkgc3VwcG9ydCB2aWRlbyBhbmQgYXVkaW8gc3RyZWFtcyBmb3Igbm93IVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gTWVkaWFUeXBlLkFVRElPIHx8IGNvbnRlbnRUeXBlID09PSBNZWRpYVR5cGUuVklERU8pIHtcbiAgICAgIGlmIChjb250ZW50VHlwZSAmJiB0aGlzLnN0cmVhbU1hcF8uaGFzKGNvbnRlbnRUeXBlKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIGFkYXB0YXRpb24gc2V0cyBmb3Igc2FtZSBjb250ZW50IHR5cGUgaXMgbm90IHN1cHBvcnRlZC4uLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zdHJlYW1NYXBfLnNldChjb250ZW50VHlwZSwgc3RyZWFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihgU2tpcHBpbmcgdW5zdXBwb3J0ZWQgdHlwZTogJHtjb250ZW50VHlwZX1gKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHBhcnNlUmVwcmVzZW50YXRpb25fKFxuICAgIGVsZW06IEVsZW1lbnQsXG4gICAgY29udGV4dDogQWRhcHRhdGlvblNldENvbnRleHRcbiAgKTogSVJlcHJlc2VudGF0aW9uIHtcbiAgICBjb25zdCBvcmlnaW5hbElkID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgJyc7XG4gICAgY29uc3QgY29tbW9uID0gdGhpcy5wYXJzZUNvbW1vbkF0dHJpYnV0ZXNBbmRFbGVtZW50c18oZWxlbSk7XG4gICAgY29uc3QgYmFuZHdpZHRoID0gTnVtYmVyKGVsZW0uZ2V0QXR0cmlidXRlKCdiYW5kd2lkdGgnKSk7XG4gICAgY29uc3Qgd2lkdGggPSBOdW1iZXIoZWxlbS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykpIHx8IGNvbnRleHQubWF4V2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gTnVtYmVyKGVsZW0uZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSkgfHwgY29udGV4dC5tYXhIZWlnaHQ7XG4gICAgY29uc3QgY29kZWNzID0gY29tbW9uLmNvZGVjcyB8fCBjb250ZXh0LmNvZGVjcztcbiAgICBjb25zdCBtaW1lVHlwZSA9IGNvbW1vbi5taW1lVHlwZSB8fCBjb250ZXh0Lm1pbWVUeXBlO1xuICAgIGNvbnN0IGZyYW1lUmF0ZSA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnZnJhbWVSYXRlJykpO1xuICAgIGxldCBzZWdtZW50VGVtcGxhdGUgPSBVdGlscy5nZXRGaXJzdENoaWxkKGVsZW0sICdTZWdtZW50VGVtcGxhdGUnKTtcbiAgICBjb25zdCBzZWdtZW50QmFzZSA9IFV0aWxzLmdldEZpcnN0Q2hpbGQoZWxlbSwgJ1NlZ21lbnRCYXNlJyk7XG4gICAgY29uc3Qgc2VnbWVudExpc3QgPSBVdGlscy5nZXRGaXJzdENoaWxkKGVsZW0sICdTZWdtZW50TGlzdCcpO1xuXG4gICAgY29uc29sZS5hc3NlcnQoXG4gICAgICBtaW1lVHlwZSxcbiAgICAgICdtaW1lVHlwZSBhdHRyaWJ1dGUgaXMgbWFuZGF0b3J5IGZvciByZXByZXNlbnNhdGlvbnMuJ1xuICAgICk7XG5cbiAgICBpZiAoXG4gICAgICBjb250ZXh0LnNlZ21lbnROb2RlICYmXG4gICAgICBjb250ZXh0LnNlZ21lbnROb2RlLmluZGV4VHlwZSA9PT0gU2VnbWVudEluZGV4VHlwZS5UZW1wbGF0ZVxuICAgICkge1xuICAgICAgc2VnbWVudFRlbXBsYXRlID0gc2VnbWVudFRlbXBsYXRlIHx8IGNvbnRleHQuc2VnbWVudE5vZGUubm9kZTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudEJhc2UgfHwgc2VnbWVudExpc3QpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ3VycmVudGx5IG9ubHkgU2VnbWVudFRlbXBsYXRlIGlzIHN1cHBvcnRlZCEnKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc2VnbWVudCBpbmRleCB0eXBlLicpO1xuICAgIH1cblxuICAgIGlmICghc2VnbWVudFRlbXBsYXRlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdObyBzdXBwb3J0IGZvciBtYW5pZmVzdCB0eXBlIScpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnT25seSBEQVNIIG1hbmlmZXN0IHdpdGggc2VnbWVudCB0ZW1wbGF0ZSBhcmUgc3VwcG9ydGVkISdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb250ZXh0LmNvbnRlbnRUeXBlKSB7XG4gICAgICBjb250ZXh0LmNvbnRlbnRUeXBlID0gVXRpbHMuZ2V0VHlwZUZyb21NaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgfVxuXG4gICAgY29uc3QgckNvbnRleHQ6IFJlcHJlc2VudGF0aW9uQ29udGV4dCA9IHtcbiAgICAgIGlkOiBvcmlnaW5hbElkLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgYWRhcHRhdGlvblNldDogY29udGV4dCxcbiAgICB9O1xuXG4gICAgY29uc3QgbWVkaWFEYXRhID0gdGhpcy5wYXJzZVNlZ21lbnRUZW1wbGF0ZV8oc2VnbWVudFRlbXBsYXRlLCByQ29udGV4dCk7XG5cbiAgICBjb25zb2xlLmFzc2VydChcbiAgICAgIG1lZGlhRGF0YS5tZWRpYVNlZ21lbnRzLmxlbmd0aCA+IDAsXG4gICAgICAnU2hvdWxkIGhhdmUgcGFyc2VkIHNlZ21lbnRzJ1xuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gVE9ET1xuICAgICAgaWQ6XG4gICAgICAgIGNvbnRleHQuY29udGVudFR5cGUgK1xuICAgICAgICAnXycgK1xuICAgICAgICBjb250ZXh0LmlkICtcbiAgICAgICAgJ18nICtcbiAgICAgICAgKG9yaWdpbmFsSWQgPyBvcmlnaW5hbElkIDogU3RyaW5nKHRoaXMuZ2xvYmFsSWRfKyspKSxcbiAgICAgIG9yaWdpbmFsSWQsXG4gICAgICB0eXBlOiBjb250ZXh0LmNvbnRlbnRUeXBlIGFzIE1lZGlhVHlwZSxcbiAgICAgIGticHM6IGJhbmR3aWR0aCAvIDEwMDAsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGZyYW1lUmF0ZSxcbiAgICAgIGNvZGVjcyxcbiAgICAgIG1pbWVUeXBlLFxuICAgICAgaW5pdGlhbGl6YXRpb246IG1lZGlhRGF0YS5pbml0U2VnbWVudCxcbiAgICAgIHNlZ21lbnRJbmRleDogbmV3IFNlZ21lbnRJbmRleChtZWRpYURhdGEubWVkaWFTZWdtZW50cyksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VTZWdtZW50VGVtcGxhdGVfKFxuICAgIGVsZW06IEVsZW1lbnQsXG4gICAgY29udGV4dDogUmVwcmVzZW50YXRpb25Db250ZXh0XG4gICk6IEFsbFNlZ21lbnRzIHtcbiAgICAvLyBTZWN0aW9uIDUuMy45LjIuMlxuICAgIGNvbnN0IHByZXNlbnRhdGlvblRpbWVPZmZzZXQgPSBOdW1iZXIoXG4gICAgICBlbGVtLmdldEF0dHJpYnV0ZSgncHJlc2VudGF0aW9uVGltZU9mZnNldCcpXG4gICAgKTtcbiAgICBjb25zdCB0aW1lc2NhbGUgPSBOdW1iZXIoZWxlbS5nZXRBdHRyaWJ1dGUoJ3RpbWVzY2FsZScpKSB8fCAxO1xuICAgIGNvbnN0IHNlZ21lbnREdXJhdGlvbiA9IE51bWJlcihlbGVtLmdldEF0dHJpYnV0ZSgnZHVyYXRpb24nKSkgfHwgLTE7XG4gICAgY29uc3QgaW5pdGlhbGl6YXRpb24gPSBlbGVtLmdldEF0dHJpYnV0ZSgnaW5pdGlhbGl6YXRpb24nKSB8fCAnJztcbiAgICBjb25zdCBtZWRpYSA9IGVsZW0uZ2V0QXR0cmlidXRlKCdtZWRpYScpIHx8ICcnO1xuICAgIGNvbnN0IHN0YXJ0TnVtYmVyID0gTnVtYmVyKGVsZW0uZ2V0QXR0cmlidXRlKCdzdGFydE51bWJlcicpKSB8fCAxO1xuICAgIGNvbnN0IHNlZ21lbnRUaW1lbGluZSA9IFV0aWxzLmdldEZpcnN0Q2hpbGQoZWxlbSwgJ1NlZ21lbnRUaW1lbGluZScpO1xuXG4gICAgY29uc3QgbUNvbnRleHQ6IE1lZGlhRGF0YUNvbnRleHQgPSB7XG4gICAgICBzdGFydE51bWJlcixcbiAgICAgIHNlZ21lbnREdXJhdGlvbixcbiAgICAgIHRpbWVPZmZzZXQ6IHByZXNlbnRhdGlvblRpbWVPZmZzZXQsXG4gICAgICB0aW1lc2NhbGUsXG4gICAgICBpbml0aWFsaXphdGlvbkF0dHI6IGluaXRpYWxpemF0aW9uLFxuICAgICAgbWVkaWFBdHRyOiBtZWRpYSxcbiAgICAgIHJlcHJlc2VudGF0aW9uOiBjb250ZXh0LFxuICAgIH07XG5cbiAgICAvLyBTZWdtZW50IHRlbXBsYXRlIHdpdGggdGltZWxpbmUuXG4gICAgaWYgKHNlZ21lbnRUaW1lbGluZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2VnbWVudHNGcm9tVGltZWxpbmVfKHNlZ21lbnRUaW1lbGluZSwgbUNvbnRleHQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNyZWF0ZVNlZ21lbnRzRnJvbVRlbXBsYXRlXyhtQ29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVNlZ21lbnRzRnJvbVRlbXBsYXRlXyhjb250ZXh0OiBNZWRpYURhdGFDb250ZXh0KTogQWxsU2VnbWVudHMge1xuICAgIGNvbnNvbGUuYXNzZXJ0KFxuICAgICAgY29udGV4dC5zZWdtZW50RHVyYXRpb24gPiAwLFxuICAgICAgJ1NlZ21lbnQgdGVtcGxhdGUgd2l0aG91dCB0aW1lbGluZSBzaG91bGQgaGF2ZSBzZWdtZW50IGR1cmF0aW9uJ1xuICAgICk7XG4gICAgaWYgKCF0aGlzLnByZXNlbnRhdGlvbkR1cmF0aW9uXykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHByZXNlbnRhdGlvbiBkdXJhdGlvbiEnKTtcbiAgICB9XG4gICAgY29uc3Qgc2VnbWVudHMgPSBbXTtcbiAgICBsZXQgcG9zaXRpb24gPSBjb250ZXh0LnN0YXJ0TnVtYmVyO1xuICAgIGNvbnN0IHNjYWxlZFNlZ21lbnREdXJhdGlvbiA9IGNvbnRleHQuc2VnbWVudER1cmF0aW9uIC8gY29udGV4dC50aW1lc2NhbGU7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gc2NhbGVkU2VnbWVudER1cmF0aW9uO1xuXG4gICAgLy8gVE9ET1xuICAgIHRoaXMubWF4U2VnbWVudER1cmF0aW9uXyA9IGVuZCAtIHN0YXJ0O1xuXG4gICAgd2hpbGUgKGVuZCA8IHRoaXMucHJlc2VudGF0aW9uRHVyYXRpb25fKSB7XG4gICAgICBjb25zdCB1bnNjYWxlZFN0YXJ0ID0gc3RhcnQgKiBjb250ZXh0LnRpbWVzY2FsZTtcbiAgICAgIGNvbnN0IHVuc2NhbGVkRW5kID0gZW5kICogY29udGV4dC50aW1lc2NhbGU7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgZHVyYXRpb246IGVuZCAtIHN0YXJ0LFxuICAgICAgICB1bnNjYWxlZFN0YXJ0LFxuICAgICAgICB1bnNjYWxlZEVuZCxcbiAgICAgICAgdW5zY2FsZWREdXJhdGlvbjogdW5zY2FsZWRFbmQgLSB1bnNjYWxlZFN0YXJ0LFxuICAgICAgICBpc0luaXQ6IGZhbHNlLFxuICAgICAgICB1cmw6IFV0aWxzLnJlc29sdmVUZW1wbGF0ZVVybChcbiAgICAgICAgICBjb250ZXh0Lm1lZGlhQXR0cixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXByZXNlbnRhdGlvbklkOiBjb250ZXh0LnJlcHJlc2VudGF0aW9uLmlkLFxuICAgICAgICAgICAgYmFuZHdpZHRoOiBjb250ZXh0LnJlcHJlc2VudGF0aW9uLmJhbmR3aWR0aCxcbiAgICAgICAgICAgIHRpbWU6IHVuc2NhbGVkU3RhcnQsXG4gICAgICAgICAgICBudW1iZXI6IHBvc2l0aW9uLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5tYW5pZmVzdFVybF9cbiAgICAgICAgKSxcbiAgICAgIH0pO1xuXG4gICAgICBzdGFydCA9IGVuZDtcbiAgICAgIGVuZCA9IE1hdGgubWluKHRoaXMucHJlc2VudGF0aW9uRHVyYXRpb25fLCBlbmQgKyBzY2FsZWRTZWdtZW50RHVyYXRpb24pO1xuICAgICAgKytwb3NpdGlvbjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmFzc2VydChzZWdtZW50cy5sZW5ndGggPiAwLCAnU2hvdWxkIGhhdmUgc2VnbWVudHMhISEnKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpbml0U2VnbWVudDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwLFxuICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgdW5zY2FsZWRTdGFydDogMCxcbiAgICAgICAgdW5zY2FsZWRFbmQ6IDAsXG4gICAgICAgIHVuc2NhbGVkRHVyYXRpb246IDAsXG4gICAgICAgIGlzSW5pdDogdHJ1ZSxcbiAgICAgICAgdXJsOiBVdGlscy5yZXNvbHZlVGVtcGxhdGVVcmwoXG4gICAgICAgICAgY29udGV4dC5pbml0aWFsaXphdGlvbkF0dHIsIC8vIEluaXQgVXJsIHRlbXBsYXRlXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVwcmVzZW50YXRpb25JZDogY29udGV4dC5yZXByZXNlbnRhdGlvbi5pZCxcbiAgICAgICAgICAgIGJhbmR3aWR0aDogY29udGV4dC5yZXByZXNlbnRhdGlvbi5iYW5kd2lkdGgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLm1hbmlmZXN0VXJsX1xuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIG1lZGlhU2VnbWVudHM6IHNlZ21lbnRzLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVNlZ21lbnRzRnJvbVRpbWVsaW5lXyhcbiAgICBlbGVtOiBFbGVtZW50LFxuICAgIGNvbnRleHQ6IE1lZGlhRGF0YUNvbnRleHRcbiAgKTogQWxsU2VnbWVudHMge1xuICAgIC8vIE1QRUctREFTSCBTZWN0aW9uIDUuMy45LjZcbiAgICBjb25zdCBzTm9kZXMgPSBVdGlscy5nZXRDaGlsZHJlbihlbGVtLCAnUycpO1xuICAgIGNvbnN0IG1lZGlhU2VnbWVudHM6IElTZWdtZW50W10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc05vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzTm9kZSA9IHNOb2Rlc1tpXTtcbiAgICAgIGNvbnN0IGQgPSBOdW1iZXIoc05vZGUuZ2V0QXR0cmlidXRlKCdkJykpO1xuICAgICAgbGV0IHIgPSBOdW1iZXIoc05vZGUuZ2V0QXR0cmlidXRlKCdyJykpO1xuICAgICAgbGV0IHQgPSBudWxsO1xuICAgICAgbGV0IHNjYWxlZFQgPSBudWxsO1xuICAgICAgY29uc3Qgc2NhbGVkRCA9IGQgLyBjb250ZXh0LnRpbWVzY2FsZTtcblxuICAgICAgLy8gVE9ETyAtIEFzc2VydCBoYXMgZHVyYXRpb25cblxuICAgICAgaWYgKHNOb2RlLmhhc0F0dHJpYnV0ZSgndCcpKSB7XG4gICAgICAgIC8vIFRoZSB2YWx1ZSBvZiB0aGUgQHQgYXR0cmlidXRlIG1pbnVzIHRoZSB2YWx1ZSBvZiB0aGVcbiAgICAgICAgLy8gQHByZXNlbnRhdGlvblRpbWVPZmZzZXQgc3BlY2lmaWVzIHRoZSBNUEQgc3RhcnQgdGltZSBvZiB0aGUgZmlyc3RcbiAgICAgICAgLy8gU2VnbWVudCBpbiB0aGUgc2VyaWVzLlxuICAgICAgICB0ID0gTnVtYmVyKHNOb2RlLmdldEF0dHJpYnV0ZSgndCcpKSAtIGNvbnRleHQudGltZU9mZnNldDtcbiAgICAgIH0gZWxzZSBpZiAobWVkaWFTZWdtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gSWYgQHQgbm90IHByZXNlbnQsIHRoZW4gdGhlIHZhbHVlIHNoYWxsIGJlIGFzc3VtZWQgemVybyBmb3IgdGhlXG4gICAgICAgIC8vIGZpcnN0IFMgZWxlbWVudC5cbiAgICAgICAgdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBAdCBub3QgcHJlc2VudCwgYW5kIG5vdCB0aGUgZmlyc3QgUyBlbGVtZW50IHRoZW4gdGhlIHZhbHVlXG4gICAgICAgIC8vIHNoYWxsIGJlIGFzc3VtZWQgdG8gYmUgdGhlIHN1bSBvZiB0aGUgcHJldmlvdXMgUyBlbGVtZW50J3MgZWFybGllc3RcbiAgICAgICAgLy8gcHJlc2VudGF0aW9uIHRpbWUgYW5kIGNvbnRpZ3VvdXMgZHVyYXRpb24gaS5lLiBlbmQgdGltZSBmb3IgcHJldmlvdXNcbiAgICAgICAgLy8gc2VnbWVudC5cbiAgICAgICAgY29uc3QgbGFzdFNlZ21lbnQgPSBtZWRpYVNlZ21lbnRzW21lZGlhU2VnbWVudHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHQgPSBsYXN0U2VnbWVudC51bnNjYWxlZFN0YXJ0ICsgbGFzdFNlZ21lbnQudW5zY2FsZWREdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdW5zY2FsZWRFbmQgPSB0ICsgZDtcblxuICAgICAgc2NhbGVkVCA9IHQgLyBjb250ZXh0LnRpbWVzY2FsZTtcblxuICAgICAgLy8gVE9ETyAtIENoZWNrIGZvciBkaXNjb250aW51aXR5XG4gICAgICBpZiAodGhpcy5tYXhTZWdtZW50RHVyYXRpb25fIDwgc2NhbGVkRCkge1xuICAgICAgICB0aGlzLm1heFNlZ21lbnREdXJhdGlvbl8gPSBzY2FsZWREO1xuICAgICAgfVxuXG4gICAgICBtZWRpYVNlZ21lbnRzLnB1c2goe1xuICAgICAgICBzdGFydDogc2NhbGVkVCxcbiAgICAgICAgZW5kOiB1bnNjYWxlZEVuZCAvIGNvbnRleHQudGltZXNjYWxlLFxuICAgICAgICBkdXJhdGlvbjogc2NhbGVkRCxcbiAgICAgICAgdW5zY2FsZWRTdGFydDogdCxcbiAgICAgICAgdW5zY2FsZWRFbmQsXG4gICAgICAgIHVuc2NhbGVkRHVyYXRpb246IGQsXG4gICAgICAgIGlzSW5pdDogZmFsc2UsXG4gICAgICAgIHVybDogVXRpbHMucmVzb2x2ZVRlbXBsYXRlVXJsKFxuICAgICAgICAgIGNvbnRleHQubWVkaWFBdHRyLCAvLyB1cmwgdGVtcGxhdGVcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiYW5kd2lkdGg6IGNvbnRleHQucmVwcmVzZW50YXRpb24uYmFuZHdpZHRoLFxuICAgICAgICAgICAgdGltZTogdCxcbiAgICAgICAgICAgIHJlcHJlc2VudGF0aW9uSWQ6IGNvbnRleHQucmVwcmVzZW50YXRpb24uaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLm1hbmlmZXN0VXJsX1xuICAgICAgICApLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRoZSB2YWx1ZSBvZiB0aGUgQHIgYXR0cmlidXRlIG9mIHRoZSBTIGVsZW1lbnQgbWF5IGJlIHNldCB0byBhXG4gICAgICAvLyBuZWdhdGl2ZSB2YWx1ZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGR1cmF0aW9uIGluZGljYXRlZCBpbiBAZCBpcyBwcm9taXNlZFxuICAgICAgLy8gdG8gcmVwZWF0IHVudGlsIHRoZSBTQHQgb2YgdGhlIG5leHQgUyBlbGVtZW50IG9yIGlmIGl0IGlzIHRoZVxuICAgICAgLy8gbGFzdCBTIGVsZW1lbnQgaW4gdGhlIFNlZ21lbnRUaW1lbGluZSBlbGVtZW50IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAgICAvLyBQZXJpb2Qgb3IgdGhlIG5leHQgdXBkYXRlIG9mIHRoZSBNUEQsIGkuZS4gaXQgaXMgdHJlYXRlZCBpbiB0aGUgc2FtZVxuICAgICAgLy8gd2F5IGFzIHRoZSBAZHVyYXRpb24gYXR0cmlidXRlIGZvciBhIGZ1bGwgcGVyaW9kLlxuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHNjYWxlZFQsICdCdWc6IFNob3VsZCBzY2FsZWQgc3RhcnQgdGltZScpO1xuXG4gICAgICAgIGNvbnN0IG5leHRTID0gc05vZGVzW2kgKyAxXTtcbiAgICAgICAgY29uc3QgaXNMYXN0UyA9IHR5cGVvZiBuZXh0UyA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGxldCBlbmRUaW1lID0gLTE7XG5cbiAgICAgICAgaWYgKGlzTGFzdFMpIHtcbiAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgLy8gUGFzcyBwZXJpb2QgY29udGV4dC4gQ3VycmVudGx5IHdlIG9ubHkgc3VwcG9ydCBzaW5nbGUgcGVyaW9kIHNvLFxuICAgICAgICAgIC8vIHBlcmlvZCBkdXJhdGlvbiBpcyBwcmVzZW50YXRpb24gZHVyYXRpb25cbiAgICAgICAgICBjb25zdCBwZXJpb2RFbmRUaW1lID0gdGhpcy5wcmVzZW50YXRpb25EdXJhdGlvbl8gfHwgdDsgLy9UT0RPXG4gICAgICAgICAgY29uc3QgbmV4dFVwZGF0ZVRpbWUgPSB0ICsgdGhpcy5taW5pbXVtVXBkYXRlUGVyaW9kXztcbiAgICAgICAgICBjb25zdCBpc0xpdmUgPSB0aGlzLnByZXNlbnRhdGlvbkR1cmF0aW9uXyA9PT0gU3RyZWFtVHlwZS5MSVZFO1xuXG4gICAgICAgICAgZW5kVGltZSA9IGlzTGl2ZSA/IG5leHRVcGRhdGVUaW1lIDogcGVyaW9kRW5kVGltZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV4dFMuaGFzQXR0cmlidXRlKCd0JykpIHtcbiAgICAgICAgICAgIGVuZFRpbWUgPSBOdW1iZXIobmV4dFMuZ2V0QXR0cmlidXRlKCd0JykpIC0gY29udGV4dC50aW1lT2Zmc2V0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlcjogbmV4dCBTIGVsZW1lbnQgaXMgbWlzc2luZyBAdCBhdHRyaWJ1dGUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5hc3NlcnQoXG4gICAgICAgICAgZW5kVGltZSA+PSBzY2FsZWRULFxuICAgICAgICAgICdCdWc6IGNvdWxkIG5vdCBjb21wdXRlIHNlZ21lbnRzIGZvciBuZWdhdGl2ZSByZXBlYXQgY291bnQnXG4gICAgICAgICk7XG5cbiAgICAgICAgciA9IE1hdGguY2VpbCgoZW5kVGltZSAtIHNjYWxlZFQpIC8gc2NhbGVkRCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSByOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IG1lZGlhU2VnbWVudHNbbWVkaWFTZWdtZW50cy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgIGNvbnN0IG5leHRTdGFydFVuc2NhbGVkID0gbGFzdFNlZ21lbnQudW5zY2FsZWRFbmQ7XG4gICAgICAgICAgY29uc3QgbmV4dEVuZFVuc2NhbGVkID0gbmV4dFN0YXJ0VW5zY2FsZWQgKyBkO1xuXG4gICAgICAgICAgbWVkaWFTZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBsYXN0U2VnbWVudC5lbmQsXG4gICAgICAgICAgICBlbmQ6IG5leHRFbmRVbnNjYWxlZCAvIGNvbnRleHQudGltZXNjYWxlLFxuICAgICAgICAgICAgZHVyYXRpb246IHNjYWxlZEQsXG4gICAgICAgICAgICB1bnNjYWxlZFN0YXJ0OiBuZXh0U3RhcnRVbnNjYWxlZCxcbiAgICAgICAgICAgIHVuc2NhbGVkRW5kOiBuZXh0RW5kVW5zY2FsZWQsXG4gICAgICAgICAgICB1bnNjYWxlZER1cmF0aW9uOiBkLFxuICAgICAgICAgICAgaXNJbml0OiBmYWxzZSxcbiAgICAgICAgICAgIHVybDogVXRpbHMucmVzb2x2ZVRlbXBsYXRlVXJsKFxuICAgICAgICAgICAgICBjb250ZXh0Lm1lZGlhQXR0cixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJhbmR3aWR0aDogY29udGV4dC5yZXByZXNlbnRhdGlvbi5iYW5kd2lkdGgsXG4gICAgICAgICAgICAgICAgdGltZTogbmV4dFN0YXJ0VW5zY2FsZWQsXG4gICAgICAgICAgICAgICAgcmVwcmVzZW50YXRpb25JZDogY29udGV4dC5yZXByZXNlbnRhdGlvbi5pZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGhpcy5tYW5pZmVzdFVybF9cbiAgICAgICAgICAgICksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5pdFNlZ21lbnQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMCxcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIHVuc2NhbGVkU3RhcnQ6IDAsXG4gICAgICAgIHVuc2NhbGVkRW5kOiAwLFxuICAgICAgICB1bnNjYWxlZER1cmF0aW9uOiAwLFxuICAgICAgICBpc0luaXQ6IHRydWUsXG4gICAgICAgIHVybDogVXRpbHMucmVzb2x2ZVRlbXBsYXRlVXJsKFxuICAgICAgICAgIGNvbnRleHQuaW5pdGlhbGl6YXRpb25BdHRyLCAvLyBJbml0IFVybCB0ZW1wbGF0ZVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlcHJlc2VudGF0aW9uSWQ6IGNvbnRleHQucmVwcmVzZW50YXRpb24uaWQsXG4gICAgICAgICAgICBiYW5kd2lkdGg6IGNvbnRleHQucmVwcmVzZW50YXRpb24uYmFuZHdpZHRoLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5tYW5pZmVzdFVybF9cbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgICBtZWRpYVNlZ21lbnRzLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlZnJlc2hNYW5pZmVzdF8oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLm1hbmlmZXN0XykgcmV0dXJuO1xuXG4gICAgY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgbWFuaWZlc3QuLi4nKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBuZXdNYW5pZmVzdCA9IGF3YWl0IHRoaXMubG9hZEFuZFBhcnNlTWFuaWZlc3RfKCk7XG5cbiAgICAgIC8vIFRPRE9cbiAgICAgIHRoaXMubWFuaWZlc3RfLmR2cldpbmRvd0xlbmd0aCA9IG5ld01hbmlmZXN0LmR2cldpbmRvd0xlbmd0aDtcbiAgICAgIHRoaXMubWFuaWZlc3RfLm1pblVwZGF0ZVBlcmlvZCA9IG5ld01hbmlmZXN0Lm1pblVwZGF0ZVBlcmlvZDtcblxuICAgICAgLy8gVXBkYXRlIHN0cmVhbXNcbiAgICAgIGlmICh0aGlzLm1hbmlmZXN0Xy52aWRlbyAmJiBuZXdNYW5pZmVzdC52aWRlbykge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0cmVhbXNfKFxuICAgICAgICAgIHRoaXMubWFuaWZlc3RfLnZpZGVvLFxuICAgICAgICAgIG5ld01hbmlmZXN0LnZpZGVvLFxuICAgICAgICAgIHRoaXMubWFuaWZlc3RfLmR2cldpbmRvd0xlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubWFuaWZlc3RfLmF1ZGlvICYmIG5ld01hbmlmZXN0LmF1ZGlvKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3RyZWFtc18oXG4gICAgICAgICAgdGhpcy5tYW5pZmVzdF8uYXVkaW8sXG4gICAgICAgICAgbmV3TWFuaWZlc3QuYXVkaW8sXG4gICAgICAgICAgdGhpcy5tYW5pZmVzdF8uZHZyV2luZG93TGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IE5vdGlmeSBuZXcgbWFuaWZlc3Q/XG5cbiAgICAgIC8vIFNjaGVkdWxlIG5leHQgdXBkYXRlXG4gICAgICB0aGlzLnJlZnJlc2hUaW1lcl8udGlja0FmdGVyKHRoaXMubWFuaWZlc3RfLm1pblVwZGF0ZVBlcmlvZCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWZyZXNoIG1hbmlmZXN0LCByZXRyeWluZy4uLicsIGVycm9yKTtcbiAgICAgIC8vIFJldHJ5XG4gICAgICB0aGlzLnJlZnJlc2hUaW1lcl8udGlja0FmdGVyKDApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RyZWFtc18oXG4gICAgb2xkU3RyZWFtczogSVJlcHJlc2VudGF0aW9uW10sXG4gICAgbmV3U3RyZWFtczogSVJlcHJlc2VudGF0aW9uW10sXG4gICAgZHZyV2luZG93TGVuZ3RoOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgY29uc29sZS5hc3NlcnQoXG4gICAgICBvbGRTdHJlYW1zLmxlbmd0aCA9PT0gbmV3U3RyZWFtcy5sZW5ndGgsXG4gICAgICAnU3RyZWFtIGNvdW50IG1pc3NtYXRjaCBhZnRlciBtYW5pZmVzdCB1cGRhdGUhJ1xuICAgICk7XG4gICAgLy8gVE9ET1xuICAgIC8vIEltcHJvdmUgdGhlIHN0cmVhbSBtYXBwaW5nLiBGb3Igc2ltcGxpY2l0eSBzYWtlIHdlIHdpbGwgYXNzdW1lLCBmb3JcbiAgICAvLyBub3csIHRoYXQgc3RyZWFtcyBhcHBlYXJzIGluIGVhY2ggbWFuaWZlc3QgaW4gdGhlIHNhbWUgb3JkZXIgYW5kXG4gICAgLy8gaW4gdGhlIHNhbWUgYW1vdW50IGkuZS4gd2UgYXNzdW1lIGFuIDE6MSBtYXBwaW5nIHdpdGggdGhlIG5ld1xuICAgIC8vIG1hbmlmZXN0LlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2xkU3RyZWFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbmV3U2VnbWVudHMgPSBuZXdTdHJlYW1zW2ldLnNlZ21lbnRJbmRleC5nZXRTZWdtZW50cygpO1xuXG4gICAgICBvbGRTdHJlYW1zW2ldLnNlZ21lbnRJbmRleC5tZXJnZShuZXdTZWdtZW50cyk7XG5cbiAgICAgIC8vIEFkanVzdCBEVlIgd2luZG93XG4gICAgICBpZiAoZHZyV2luZG93TGVuZ3RoKSB7XG4gICAgICAgIG9sZFN0cmVhbXNbaV0uc2VnbWVudEluZGV4LmFkanVzdER2cldpbmRvdyhkdnJXaW5kb3dMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///292\n")},994:(__unused_webpack_module,exports)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserUtils = void 0;\n/**\n * A collection of utility methods to parse MPEG-DASH manifests.\n */\nclass ParserUtils {\n    static parseXml(data) {\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(data, 'text/xml');\n        if (xml && xml.documentElement.tagName === 'MPD') {\n            return xml.documentElement;\n        }\n        return null;\n    }\n    static getChildren(node, tagName) {\n        const childElements = [];\n        for (const child of Array.from(node.childNodes)) {\n            if (child instanceof Element && child.tagName === tagName) {\n                childElements.push(child);\n            }\n        }\n        return childElements;\n    }\n    static getFirstChild(node, tagName) {\n        const children = ParserUtils.getChildren(node, tagName);\n        return (children === null || children === void 0 ? void 0 : children[0]) || null;\n    }\n    static parseIsoDuration(durationString) {\n        const secondsInYear = 365 * 24 * 60 * 60;\n        const secondsInMonth = 30 * 24 * 60 * 60;\n        const secondsInDay = 24 * 60 * 60;\n        const secondsInHour = 60 * 60;\n        const secondsInMinute = 60;\n        if (!durationString) {\n            return null;\n        }\n        const regex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\n        const match = regex.exec(durationString);\n        let duration = parseFloat((match === null || match === void 0 ? void 0 : match[2]) || '0') * secondsInYear +\n            parseFloat((match === null || match === void 0 ? void 0 : match[4]) || '0') * secondsInMonth +\n            parseFloat((match === null || match === void 0 ? void 0 : match[6]) || '0') * secondsInDay +\n            parseFloat((match === null || match === void 0 ? void 0 : match[8]) || '0') * secondsInHour +\n            parseFloat((match === null || match === void 0 ? void 0 : match[10]) || '0') * secondsInMinute +\n            parseFloat((match === null || match === void 0 ? void 0 : match[12]) || '0');\n        if (typeof (match === null || match === void 0 ? void 0 : match[1]) !== 'undefined') {\n            duration = -duration;\n        }\n        return duration;\n    }\n    static parseDate(dateString) {\n        if (!dateString) {\n            return null;\n        }\n        // Make sure to use UTC time instead of local time zone\n        if (!dateString.endsWith('Z')) {\n            dateString += 'Z';\n        }\n        const result = Date.parse(dateString);\n        return !isNaN(result) ? Math.floor(result / 1000.0) : null;\n    }\n    static resolveTemplateUrl(url, identifiers, baseUrl) {\n        let resolvedTemplate = url;\n        if (identifiers.representationId) {\n            resolvedTemplate = resolvedTemplate.replace(/\\$RepresentationID\\$/g, String(identifiers.representationId));\n        }\n        if (ParserUtils.isNumber(identifiers.number)) {\n            resolvedTemplate = resolvedTemplate.replace(/\\$Number\\$/g, String(identifiers.number));\n        }\n        if (ParserUtils.isNumber(identifiers.subNumber)) {\n            resolvedTemplate = resolvedTemplate.replace(/\\$SubNumber\\$/g, String(identifiers.number));\n        }\n        if (ParserUtils.isNumber(identifiers.bandwidth)) {\n            resolvedTemplate = resolvedTemplate.replace(/\\$Bandwidth\\$/, String(identifiers.bandwidth));\n        }\n        if (ParserUtils.isNumber(identifiers.time)) {\n            resolvedTemplate = resolvedTemplate.replace(/\\$Time\\$/g, String(identifiers.time));\n        }\n        if (baseUrl === null || baseUrl === void 0 ? void 0 : baseUrl.startsWith('http')) {\n            resolvedTemplate = new window.URL(resolvedTemplate, baseUrl).href;\n        }\n        return resolvedTemplate;\n    }\n    static getTypeFromMimeType(mimeType) {\n        if (!mimeType) {\n            return '';\n        }\n        return mimeType.split('/')[0] || '';\n    }\n    static getFullMimeType(stream) {\n        let fullMimeType = stream.mimeType;\n        if (stream.codecs) {\n            fullMimeType += '; codecs=\"' + stream.codecs + '\"';\n        }\n        return fullMimeType;\n    }\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n}\nexports.ParserUtils = ParserUtils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///994\n")},288:(__unused_webpack_module,exports)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SegmentIndex = void 0;\n/**\n * Creates a segment index.\n */\nclass SegmentIndex {\n    constructor(segments) {\n        this.segments_ = segments;\n    }\n    /**\n     * Get All segments in this index.\n     * @returns All segments in the index.\n     */\n    getSegments() {\n        return this.segments_;\n    }\n    /**\n     * Add new segment to the index.\n     * @param newSegments\n     */\n    merge(newSegments) {\n        if (newSegments.length < 1) {\n            return;\n        }\n        const currentEndTime = this.getEndTime(true);\n        // console.log('Current timeline end:', currentEndTime);\n        // Extend current index with new segments\n        for (let i = 0; i < newSegments.length; i++) {\n            const newSegment = newSegments[i];\n            if (newSegment.unscaledStart >= currentEndTime) {\n                this.segments_.push(newSegment);\n                // console.log(\n                //   'Added new segment to index. Start:', newSegment.unscaledStart,\n                //   'End:', (newSegment.unscaledStart + newSegment.unscaledDuration));\n            }\n        }\n        if (!this.isContiguous(this.segments_)) {\n            console.warn('The segment timeline is not contiguous. ' +\n                'This might lead to playback issues');\n        }\n    }\n    /**\n     * Search the index for a segment that contains the providedn |time|.\n     *\n     * @param time\n     * @returns The segment that contains |time| or null.\n     */\n    find(time) {\n        for (const segment of this.segments_) {\n            if (segment.start <= time && time < segment.end) {\n                return segment;\n            }\n        }\n        console.warn('Could not find segment for time:' + time + '.', 'Segment count: ' + (this.segments_.length - 1), 'Last end: ' + this.getEndTime());\n        return null;\n    }\n    /**\n     * Get the index start time.\n     *\n     * @param unscaled Whether or not the return the unscaled time\n     * @returns Start time.\n     */\n    getStartTime(unscaled) {\n        if (this.segments_.length > 0) {\n            const first = this.segments_[this.segments_.length - 1];\n            return unscaled ? first.start : first.unscaledStart;\n        }\n        return 0;\n    }\n    /**\n     * Get the index end time.\n     *\n     * @param unscaled Whether or not the return the unscaled time\n     * @returns End time.\n     */\n    getEndTime(unscaled) {\n        if (this.segments_.length > 0) {\n            const last = this.segments_[this.segments_.length - 1];\n            return unscaled ? last.unscaledEnd : last.end;\n        }\n        return 0;\n    }\n    /**\n     * Evicts segment from the index, that have fallen out of the provided\n     * window length.\n     *\n     * @param dvrWindowLength DVR window length\n     */\n    adjustDvrWindow(dvrWindowLength) {\n        const windowStart = this.getEndTime() - dvrWindowLength;\n        const oldSize = this.segments_.length;\n        this.segments_ = this.segments_.filter(segment => segment.end > windowStart);\n        const newSize = this.segments_.length;\n        console.log('Evicted ' + (oldSize - newSize) + ' segments.');\n    }\n    /**\n     * Checks if the provided media segments constitute a contiguous timeline.\n     *\n     * @param segments Array of media segments\n     * @returns True if timeline is contiguous, false otherwise.\n     */\n    isContiguous(segments) {\n        if (segments.length < 2) {\n            return true;\n        }\n        for (let i = 1; i < segments.length; i++) {\n            const prev = segments[i - 1];\n            const curr = segments[i];\n            const prevEnd = prev.unscaledStart + prev.unscaledDuration;\n            if (curr.unscaledStart - prevEnd !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the timeline formed by the segments currently in the index\n     * includes the provided |time|.\n     * @param time Time to check\n     * @returns True if |time| in segment timeline.\n     */\n    hasTime(time) {\n        const firstSegment = this.segments_[0];\n        const lastSegment = this.segments_[this.segments_.length - 1];\n        const firstSegmentStart = firstSegment.start;\n        const lastSegmentEnd = lastSegment.end;\n        return firstSegmentStart <= time && time <= lastSegmentEnd;\n    }\n}\nexports.SegmentIndex = SegmentIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///288\n")},419:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.StreamType = exports.MediaType = void 0;\nvar MediaType;\n(function (MediaType) {\n    MediaType["VIDEO"] = "video";\n    MediaType["AUDIO"] = "audio";\n})(MediaType || (exports.MediaType = MediaType = {}));\nvar StreamType;\n(function (StreamType) {\n    StreamType[StreamType["LIVE"] = 0] = "LIVE";\n    StreamType[StreamType["VOD"] = 1] = "VOD";\n})(StreamType || (exports.StreamType = StreamType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE5LmpzIiwibWFwcGluZ3MiOiI7OztBQTJDQSxJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFDbkIsNEJBQWU7SUFDZiw0QkFBZTtBQUNqQixDQUFDLEVBSFcsU0FBUyx5QkFBVCxTQUFTLFFBR3BCO0FBRUQsSUFBWSxVQUdYO0FBSEQsV0FBWSxVQUFVO0lBQ3BCLDJDQUFJO0lBQ0oseUNBQUc7QUFDTCxDQUFDLEVBSFcsVUFBVSwwQkFBVixVQUFVLFFBR3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW9kYS8uL3NyYy9kYXNoL3R5cGVzLnRzP2Q3ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJU2VnbWVudCB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xuICBkdXJhdGlvbjogbnVtYmVyO1xuICB1bnNjYWxlZFN0YXJ0OiBudW1iZXI7XG4gIHVuc2NhbGVkRW5kOiBudW1iZXI7XG4gIHVuc2NhbGVkRHVyYXRpb246IG51bWJlcjtcbiAgaXNJbml0OiBib29sZWFuO1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVwcmVzZW50YXRpb24ge1xuICBpZDogc3RyaW5nO1xuICBvcmlnaW5hbElkOiBzdHJpbmc7XG4gIHR5cGU6IE1lZGlhVHlwZTtcbiAga2JwczogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyIHwgbnVsbDtcbiAgaGVpZ2h0OiBudW1iZXIgfCBudWxsO1xuICBmcmFtZVJhdGU6IG51bWJlciB8IG51bGw7XG4gIGNvZGVjczogc3RyaW5nO1xuICBtaW1lVHlwZTogc3RyaW5nO1xuICBpbml0aWFsaXphdGlvbjogSVNlZ21lbnQ7XG4gIHNlZ21lbnRJbmRleDogSVNlZ21lbnRJbmRleDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWFuaWZlc3Qge1xuICB0eXBlOiBTdHJlYW1UeXBlO1xuICBzdGFydFRpbWU6IG51bWJlcjtcbiAgZGVsYXk6IG51bWJlcjtcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgZHZyV2luZG93TGVuZ3RoOiBudW1iZXI7XG4gIG1pbkJ1ZmZlclRpbWU6IG51bWJlcjtcbiAgbWluVXBkYXRlUGVyaW9kOiBudW1iZXI7XG4gIG1heFNlZ21lbnREdXJhdGlvbjogbnVtYmVyO1xuICB2aWRlbzogSVJlcHJlc2VudGF0aW9uW107XG4gIGF1ZGlvOiBJUmVwcmVzZW50YXRpb25bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWFuaWZlc3RQYXJzZXIge1xuICBzdGFydChtYW5pZmVzdFVybDogc3RyaW5nKTogUHJvbWlzZTxJTWFuaWZlc3Q+O1xuICBzdG9wKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBlbnVtIE1lZGlhVHlwZSB7XG4gIFZJREVPID0gJ3ZpZGVvJyxcbiAgQVVESU8gPSAnYXVkaW8nLFxufVxuXG5leHBvcnQgZW51bSBTdHJlYW1UeXBlIHtcbiAgTElWRSxcbiAgVk9ELFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWdtZW50SW5kZXgge1xuICBnZXRTZWdtZW50cygpOiBJU2VnbWVudFtdO1xuICBtZXJnZShuZXdTZWdtZW50czogSVNlZ21lbnRbXSk6IHZvaWQ7XG4gIGZpbmQodGltZTogbnVtYmVyKTogSVNlZ21lbnQgfCBudWxsO1xuICBnZXRTdGFydFRpbWUodW5zY2FsZWQ/OiBib29sZWFuKTogbnVtYmVyO1xuICBnZXRFbmRUaW1lKHVuc2NhbGVkPzogYm9vbGVhbik6IG51bWJlcjtcbiAgYWRqdXN0RHZyV2luZG93KGR2cldpbmRvd0xlbmd0aDogbnVtYmVyKTogdm9pZDtcbiAgaXNDb250aWd1b3VzKHNlZ21lbnRzOiBJU2VnbWVudFtdKTogYm9vbGVhbjtcbiAgaGFzVGltZSh0aW1lOiBudW1iZXIpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcmVzZW50YXRpb24ge1xuICBpc0xpdmUoKTogYm9vbGVhbjtcbiAgZ2V0U3RhcnRUaW1lKCk6IG51bWJlcjtcbiAgZ2V0TWF4U2VnbWVudER1cmF0aW9uKCk6IG51bWJlcjtcbiAgZ2V0RGVsYXkoKTogbnVtYmVyO1xuICBnZXRQb3NpdGlvbigpOiBudW1iZXI7XG4gIGdldER1cmF0aW9uKCk6IG51bWJlcjtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///419\n')},607:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\nconst player_1 = __webpack_require__(251);\nconst lib = {\n    Player: player_1.Player,\n};\nexports["default"] = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLDBDQUFnQztBQUVoQyxNQUFNLEdBQUcsR0FBRztJQUNWLE1BQU0sRUFBTixlQUFNO0NBQ1AsQ0FBQztBQUVGLHFCQUFlLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZGEvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BsYXllcn0gZnJvbSAnLi9wbGF5ZXInO1xuXG5jb25zdCBsaWIgPSB7XG4gIFBsYXllcixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxpYjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///607\n')},562:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MseAdapter = void 0;\nconst parser_utils_1 = __webpack_require__(994);\nconst types_1 = __webpack_require__(419);\nconst async_task_1 = __webpack_require__(187);\nconst time_ranges_1 = __webpack_require__(377);\n/**\n * The a wrapper class around the MSE APIs to provide a \"better\" handle thereof.\n */\nclass MseAdapter {\n    constructor(video) {\n        this.mediaSource_ = null;\n        this.objectUrl_ = '';\n        this.sourceBuffers_ = new Map();\n        this.appendQ_ = new Map();\n        this.video_ = video;\n        this.mediaSourceOpenTask_ = new async_task_1.AsyncTask();\n        this.onUpdateEndVideo_ = _ => {\n            this.onUpdateEnd_(types_1.MediaType.VIDEO);\n        };\n        this.onErrorVideo_ = e => {\n            console.log('(mse) video source buffer error', e);\n        };\n        this.onUpdateEndAudio_ = _ => {\n            this.onUpdateEnd_(types_1.MediaType.AUDIO);\n        };\n        this.onErrorAudio_ = e => {\n            console.log('(mse) audio source buffer error', e);\n        };\n    }\n    openMediaSource() {\n        const onSourceOpen = () => {\n            var _a;\n            console.log('media source is open...');\n            (_a = this.mediaSource_) === null || _a === void 0 ? void 0 : _a.removeEventListener('sourceopen', onSourceOpen);\n            this.mediaSourceOpenTask_.done();\n        };\n        this.mediaSource_ = new MediaSource();\n        this.mediaSource_.addEventListener('sourceopen', onSourceOpen);\n        this.objectUrl_ = window.URL.createObjectURL(this.mediaSource_);\n        this.video_.src = this.objectUrl_;\n        return this.mediaSourceOpenTask_.promise;\n    }\n    stop() {\n        // TODO - Abort ongoing operations on source buffers first!\n        this.sourceBuffers_.forEach((sourceBuffer, mediaType) => {\n            if (mediaType === types_1.MediaType.VIDEO) {\n                sourceBuffer.removeEventListener('error', this.onErrorVideo_);\n                sourceBuffer.removeEventListener('updateend', this.onUpdateEndVideo_);\n            }\n        });\n    }\n    closeMediaSource() {\n        this.stop();\n        if (this.objectUrl_) {\n            window.URL.revokeObjectURL(this.objectUrl_);\n        }\n        this.sourceBuffers_.forEach(sourceBuffer => {\n            var _a;\n            (_a = this.mediaSource_) === null || _a === void 0 ? void 0 : _a.removeSourceBuffer(sourceBuffer);\n        });\n        this.mediaSource_ = null;\n    }\n    setupSourceBuffers(streamMap) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.mediaSourceOpenTask_;\n            if (!this.mediaSource_) {\n                throw new Error('No MediaSource!');\n            }\n            const videoStream = streamMap.get(types_1.MediaType.VIDEO);\n            const audioStream = streamMap.get(types_1.MediaType.AUDIO);\n            let setupSuccess = true;\n            if (videoStream) {\n                setupSuccess = this.addSourceBuffer_(types_1.MediaType.VIDEO, videoStream);\n            }\n            if (audioStream) {\n                setupSuccess = this.addSourceBuffer_(types_1.MediaType.AUDIO, audioStream);\n            }\n            if (this.sourceBuffers_.size < 1 || !setupSuccess) {\n                console.warn('Could not setup (all) source buffers...');\n                throw new Error('Could not setup (all) source buffers...');\n            }\n        });\n    }\n    appendBuffer(mediaType, data) {\n        var _a;\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            if (!this.appendQ_.has(mediaType)) {\n                this.appendQ_.set(mediaType, []);\n            }\n            const appendContext = {\n                mediaType,\n                data,\n                operation: new async_task_1.AsyncTask(),\n                scheduled: false,\n            };\n            (_a = this.appendQ_.get(mediaType)) === null || _a === void 0 ? void 0 : _a.push(appendContext);\n            this.runQueue_(mediaType);\n            return appendContext.operation.promise;\n        }\n        return Promise.reject(new Error(`Not source buffer found for type ${mediaType}`));\n    }\n    setCurrentTime(time) {\n        console.assert(time >= 0, 'Current time can not be negative');\n        this.video_.currentTime = time;\n    }\n    setDuration(duration) {\n        if (this.mediaSource_) {\n            this.mediaSource_.duration = duration;\n        }\n    }\n    getBufferEnd(mediaType) {\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            try {\n                const ranges = sourceBuffer.buffered;\n                if (ranges !== null && typeof ranges !== 'undefined' && ranges.length) {\n                    return ranges.end(ranges.length - 1);\n                }\n            }\n            catch (e) {\n                console.error('Could not get time ranges for ', mediaType, e);\n            }\n        }\n        return null;\n    }\n    getBufferedAheadOf(mediaType, time) {\n        let bufferedAhead = 0;\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            try {\n                const ranges = sourceBuffer.buffered;\n                bufferedAhead = time_ranges_1.TimeRangesUtils.bufferedAheadOf(ranges, time);\n            }\n            catch (e) {\n                console.error('Could not get time ranges for ', mediaType, e);\n            }\n        }\n        return bufferedAhead;\n    }\n    onUpdateEnd_(mediaType) {\n        const queue = this.appendQ_.get(mediaType);\n        // Pop from queue\n        const context = queue === null || queue === void 0 ? void 0 : queue.shift();\n        if (context) {\n            console.assert(context.scheduled, 'Bug: (mse) first item in the queue should have been scheduled!');\n            // Resolve operation promise\n            context.operation.done();\n            // Run queue\n            this.runQueue_(mediaType);\n        }\n    }\n    runQueue_(mediaType) {\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        const queue = this.appendQ_.get(mediaType);\n        console.assert(!!queue || !!sourceBuffer, 'Bug: (mse) invalid call to runQueue_()');\n        if (!queue || !sourceBuffer) {\n            console.warn('Unsuccessful attempt to update buffer');\n            return;\n        }\n        if (queue.length === 0) {\n            // Nothing to to\n            return;\n        }\n        if (sourceBuffer.updating) {\n            // Wait for updateend\n            return;\n        }\n        // FIFO\n        const next = queue[0];\n        console.assert(!next.scheduled, 'Bug: (mse) found scheduled item in run queue!');\n        next.scheduled = true;\n        sourceBuffer.appendBuffer(new Uint8Array(next.data));\n    }\n    /**\n     * Create a source buffer for |mediaType| and add it to the media source\n     * @param mediaType\n     * @param stream\n     */\n    addSourceBuffer_(mediaType, stream) {\n        if (this.mediaSource_) {\n            const fullMimeType = parser_utils_1.ParserUtils.getFullMimeType(stream);\n            const supportedByPlatform = MediaSource.isTypeSupported(fullMimeType);\n            console.assert(mediaType === types_1.MediaType.VIDEO || mediaType === types_1.MediaType.AUDIO, 'Invalid media type!');\n            console.assert(supportedByPlatform, 'Type must supported by platform!', fullMimeType);\n            if (!supportedByPlatform) {\n                console.warn(`Skipping ${mediaType} stream because not supported by platform.`);\n                return false;\n            }\n            const sourceBuffer = this.mediaSource_.addSourceBuffer(fullMimeType);\n            if (mediaType === types_1.MediaType.VIDEO) {\n                sourceBuffer.addEventListener('updateend', this.onUpdateEndVideo_);\n                sourceBuffer.addEventListener('error', this.onErrorVideo_);\n                this.sourceBuffers_.set(types_1.MediaType.VIDEO, sourceBuffer);\n            }\n            if (mediaType === types_1.MediaType.AUDIO) {\n                sourceBuffer.addEventListener('updateend', this.onUpdateEndAudio_);\n                sourceBuffer.addEventListener('error', this.onErrorAudio_);\n                this.sourceBuffers_.set(types_1.MediaType.AUDIO, sourceBuffer);\n            }\n            return true;\n        }\n        return false;\n    }\n}\nexports.MseAdapter = MseAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///562\n")},251:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Player = void 0;\nconst types_1 = __webpack_require__(419);\nconst mse_adapter_1 = __webpack_require__(562);\nconst streamer_1 = __webpack_require__(317);\nconst manifest_parser_1 = __webpack_require__(292);\n/**\n * A minimal MPEG-DASH player.\n */\nclass Player {\n    constructor(video) {\n        this.manifestUrl_ = '';\n        this.manifest_ = null;\n        this.parser_ = null;\n        this.mse_ = null;\n        this.streamer_ = null;\n        this.video_ = video;\n    }\n    /**\n     * Loads and play the provided content.\n     *\n     * @param streamUrl The content URL.\n     * @return Promise.\n     */\n    load(streamUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.manifestUrl_ = streamUrl;\n            this.parser_ = new manifest_parser_1.ManifestParser();\n            this.mse_ = new mse_adapter_1.MseAdapter(this.video_);\n            this.streamer_ = new streamer_1.Streamer(this.mse_, this.getPresentationImpl_());\n            this.manifest_ = yield this.parser_.start(this.manifestUrl_);\n            const initStreams = new Map();\n            initStreams.set(types_1.MediaType.VIDEO, this.pickHighestKbps_(this.manifest_.video));\n            initStreams.set(types_1.MediaType.AUDIO, this.pickHighestKbps_(this.manifest_.audio));\n            yield this.streamer_.setup(initStreams);\n            const streamingStarted = yield this.streamer_.start();\n            if (streamingStarted) {\n                this.video_.play();\n            }\n            else {\n                console.error('Could not start streaming!');\n                throw Error('Streaming Start failed');\n            }\n        });\n    }\n    /**\n     * Stops the player.\n     */\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.parser_) {\n                this.parser_.stop();\n                this.parser_ = null;\n            }\n            if (this.streamer_) {\n                this.streamer_.stop();\n            }\n            if (this.mse_) {\n                this.mse_ = null;\n            }\n        });\n    }\n    /**\n     * Get all video tracks.\n     * @returns All available video tracks\n     */\n    getAllVideo() {\n        if (this.manifest_ && this.manifest_.video.length > 0) {\n            return this.manifest_.video.map(video => this.getPublicVideo_(video));\n        }\n        return [];\n    }\n    /**\n     * Get all audio tracks.\n     * @returns All available audio tracks.\n     */\n    getAllAudio() {\n        if (this.manifest_ && this.manifest_.audio.length > 0) {\n            return this.manifest_.audio.map(audio => this.getPublicAudio_(audio));\n        }\n        return [];\n    }\n    /**\n     * Get the active (currently buffering) video stream.\n     * @returns The currently active video stream or null.\n     */\n    getActiveVideo() {\n        var _a;\n        const active = ((_a = this.streamer_) === null || _a === void 0 ? void 0 : _a.getActiveStream(types_1.MediaType.VIDEO)) || null;\n        if (active) {\n            return this.getPublicVideo_(active);\n        }\n        return active;\n    }\n    /**\n     * Get the active (currently buffering) audio stream.\n     * @returns The currently active audio stream or null.\n     */\n    getActiveAudio() {\n        var _a;\n        const active = ((_a = this.streamer_) === null || _a === void 0 ? void 0 : _a.getActiveStream(types_1.MediaType.AUDIO)) || null;\n        if (active) {\n            return this.getPublicAudio_(active);\n        }\n        return null;\n    }\n    isLive() {\n        if (this.manifest_ && this.manifest_.type === types_1.StreamType.LIVE) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @returns An implementation of IPresentation.\n     */\n    getPresentationImpl_() {\n        return {\n            isLive: () => this.isLive(),\n            getStartTime: () => (this.manifest_ && this.manifest_.startTime) || 0,\n            getMaxSegmentDuration: () => {\n                if (this.manifest_) {\n                    return this.manifest_.maxSegmentDuration;\n                }\n                return 0;\n            },\n            getDelay: () => {\n                if (this.manifest_) {\n                    return this.manifest_.delay;\n                }\n                return 0;\n            },\n            getPosition: () => this.video_.currentTime || 0,\n            getDuration: () => {\n                if (this.manifest_) {\n                    return this.manifest_.duration;\n                }\n                return 0;\n            },\n        };\n    }\n    pickHighestKbps_(streams) {\n        return streams.reduce((s1, s2) => (s1.kbps > s2.kbps ? s1 : s2));\n    }\n    getPublicVideo_(video) {\n        return {\n            id: video.id,\n            originalId: video.originalId,\n            type: video.type,\n            kbps: video.kbps,\n            codecs: video.codecs,\n            mimeType: video.mimeType,\n            width: video.width,\n            height: video.height,\n            frameRate: video.frameRate,\n        };\n    }\n    getPublicAudio_(audio) {\n        return {\n            id: audio.id,\n            originalId: audio.originalId,\n            type: audio.type,\n            kbps: audio.kbps,\n            codecs: audio.codecs,\n            mimeType: audio.mimeType,\n        };\n    }\n}\nexports.Player = Player;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///251\n")},317:function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Streamer = void 0;\nconst types_1 = __webpack_require__(419);\nconst timer_1 = __webpack_require__(719);\nconst network_1 = __webpack_require__(433);\n/**\n * The Streamer\n *\n * This class is responsible for streaming the media content by leveraging\n * the MSE APIs (via the MSE Adapter).\n */\nclass Streamer {\n    constructor(mseAdapter, presentation) {\n        this.mediaStates_ = new Map();\n        this.startTime_ = null;\n        this.stopped_ = false;\n        this.scheduleInterval = 0.25;\n        this.mse_ = mseAdapter;\n        this.presentation_ = presentation;\n    }\n    /**\n     * This method sets up the streamer. It needs to be called first!\n     * Upon call, it will open the media source and setup source buffers for\n     * streams in |streamMap|. Futhermore it will create an internal media state\n     * for each stream in |streamMap|; the media state keeps record of the\n     * stream's context the streamer needs to operate correctly.\n     *\n     * @param streamMap A map containing initial streams\n     * @returns Promise\n     */\n    setup(streamMap) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.mse_.openMediaSource();\n            yield this.mse_.setupSourceBuffers(streamMap);\n            // Create media states\n            streamMap.forEach((stream, mediatType) => {\n                if (mediatType === types_1.MediaType.VIDEO) {\n                    if (!this.mediaStates_.has(mediatType)) {\n                        this.mediaStates_.set(mediatType, this.createMediaState_(mediatType, stream));\n                    }\n                }\n                if (mediatType === types_1.MediaType.AUDIO) {\n                    if (!this.mediaStates_.has(mediatType)) {\n                        this.mediaStates_.set(mediatType, this.createMediaState_(mediatType, stream));\n                    }\n                }\n            });\n            // This operation is successful is we could setup all streams.\n            console.assert(streamMap.size === this.mediaStates_.size, 'Should have media states for all types');\n            // Set duration\n            const stream = streamMap.get(types_1.MediaType.VIDEO) || streamMap.get(types_1.MediaType.AUDIO);\n            // TODO - Add getDuration() to IPresentation\n            let duration = stream === null || stream === void 0 ? void 0 : stream.segmentIndex.getEndTime();\n            if (!duration) {\n                throw new Error('Could not set stream duration!');\n            }\n            if (this.presentation_.isLive()) {\n                duration = Number.MAX_SAFE_INTEGER;\n            }\n            this.mse_.setDuration(duration);\n        });\n    }\n    /**\n     * Start the streaming. At this point the media source and source buffers\n     * are set. This method will set the stream start time and active\n     * the schedule timer for each media state.\n     *\n     * @returns True if successful, false otherwise.\n     */\n    start() {\n        if (this.mediaStates_.size === 0) {\n            console.warn('Streams needs to be setup before start. No-op...');\n            return false;\n        }\n        if (this.startTime_) {\n            console.warn('Streaming already started...');\n            return false;\n        }\n        this.stopped_ = false;\n        this.startTime_ = 0;\n        // For live stream calculate 'tune-in' time.\n        if (this.presentation_.isLive()) {\n            const presentationDelay = this.presentation_.getDelay();\n            this.startTime_ = Math.max(0, this.getLiveEdge_() - presentationDelay);\n        }\n        const mediaState = this.mediaStates_.get(types_1.MediaType.VIDEO) ||\n            this.mediaStates_.get(types_1.MediaType.AUDIO);\n        console.assert(mediaState === null || mediaState === void 0 ? void 0 : mediaState.stream.segmentIndex.hasTime(this.startTime_), 'Bug: Start time is not within the presentation timeline');\n        console.log('Start time:', this.startTime_);\n        // Set the start time\n        this.mse_.setCurrentTime(this.startTime_);\n        for (const mediaState of this.mediaStates_.values()) {\n            // Start streaming\n            this.onTick_(mediaState);\n            // Setup scheduler\n            mediaState.scheduleTimer = new timer_1.Timer(() => this.onTick_(mediaState));\n            mediaState.scheduleTimer.tickEvery(this.scheduleInterval);\n        }\n        return true;\n    }\n    /**\n     * Stop streaming.\n     */\n    stop() {\n        var _a;\n        this.stopped_ = true;\n        this.mse_.closeMediaSource();\n        for (const mediaState of this.mediaStates_.values()) {\n            (_a = mediaState.scheduleTimer) === null || _a === void 0 ? void 0 : _a.clear();\n            mediaState.updating = false;\n        }\n    }\n    /**\n     * @returns The presentation time we started streaming at\n     */\n    getStartTime() {\n        return this.startTime_;\n    }\n    /**\n     * Get the stream of type |mediaType| being currently buffered\n     *\n     * @param mediaType The media type\n     * @returns The active |mediaType| stream or null\n     */\n    getActiveStream(mediaType) {\n        const mediaState = this.mediaStates_.get(mediaType);\n        if (mediaState) {\n            return mediaState.stream;\n        }\n        return null;\n    }\n    /**\n     * Called when a stream's scheduler timer ticked. This will check, for an\n     * idling stream, if there is a segment to download in which case\n     * |fetchAndAppend_()| will be called to perform the actually download\n     * and push the data to the source buffer (via the MSE adapter).\n     *\n     * @param mediaState The media state of the currently scheduled stream.\n     * @returns Promise.\n     */\n    onTick_(mediaState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.stopped_) {\n                // Streaming has been stopped\n                return;\n            }\n            if (mediaState.updating) {\n                // Media state is still updating\n                return;\n            }\n            // Check if we should buffer more\n            const bufferingGoal = 30;\n            const playheadPosition = this.presentation_.getPosition();\n            const bufferedAhead = this.mse_.getBufferedAheadOf(mediaState.type, playheadPosition);\n            if (bufferedAhead > bufferingGoal) {\n                return;\n            }\n            mediaState.updating = true;\n            try {\n                const timeNeeded = this.getTimeNeeded_(mediaState);\n                const nextSegment = mediaState.stream.segmentIndex.find(timeNeeded);\n                if (nextSegment) {\n                    if (mediaState.needInit) {\n                        const initSegment = mediaState.stream.initialization;\n                        yield this.fetchAndAppend_(mediaState, initSegment);\n                    }\n                    yield this.fetchAndAppend_(mediaState, nextSegment);\n                    mediaState.lastSegment = nextSegment;\n                }\n            }\n            catch (e) {\n                const netRespone = e;\n                if (netRespone.status && netRespone.status === 404) {\n                    console.info('Segment present in manifest but server returned HTTP 404.', 'Will rety...');\n                }\n                else {\n                    console.error('(streaming) Fetch and append failed...', e);\n                    // throw e;\n                }\n            }\n            finally {\n                mediaState.updating = false;\n            }\n        });\n    }\n    /**\n     * Fetch segment and push data to buffer.\n     *\n     * @param mediaState The stream's state/context.\n     * @param segment The segment to download.\n     */\n    fetchAndAppend_(mediaState, segment) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new network_1.HttpRequest(segment.url);\n            request.responseType = 'arraybuffer';\n            const response = yield network_1.NetworkHandle.fetch(request);\n            yield this.mse_.appendBuffer(mediaState.type, response.data);\n            if (segment.isInit) {\n                mediaState.needInit = false;\n            }\n        });\n    }\n    /**\n     * Get next timestamp we need to buffer.\n     *\n     * @param mediaState The stream state/context.\n     * @returns The time needed.\n     */\n    getTimeNeeded_(mediaState) {\n        if (mediaState.lastSegment) {\n            return mediaState.lastSegment.end;\n        }\n        return this.presentation_.getPosition();\n    }\n    /**\n     * Computes the live edge.\n     * @returns The live edge\n     */\n    getLiveEdge_() {\n        console.assert(this.presentation_.isLive(), 'Invalid call to getLiveEdge_()');\n        const maxSegmentDuration = this.presentation_.getMaxSegmentDuration();\n        const presentationStartTime = this.presentation_.getStartTime();\n        const now = Date.now() / 1000;\n        return Math.max(0, now - maxSegmentDuration - presentationStartTime);\n    }\n    createMediaState_(type, stream) {\n        return {\n            type,\n            stream,\n            needInit: true,\n            lastSegment: null,\n            updating: false,\n            scheduleTimer: null,\n        };\n    }\n}\nexports.Streamer = Streamer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///317\n")},187:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AsyncTask = void 0;\nclass AsyncTask {\n    constructor() {\n        this.done = () => { };\n        this.fail = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.done = value => resolve(value);\n            this.fail = error => reject(error);\n        });\n    }\n    timeOut() {\n        return this;\n    }\n}\nexports.AsyncTask = AsyncTask;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLE1BQWEsU0FBUztJQUtwQjtRQUhPLFNBQUksR0FBd0MsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQ3JELFNBQUksR0FBMEIsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBRzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQWZELDhCQWVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW9kYS8uL3NyYy91dGlscy9hc3luYy10YXNrLnRzPzZhMGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEFzeW5jVGFzazxUPiB7XG4gIHB1YmxpYyBwcm9taXNlOiBQcm9taXNlPFQ+O1xuICBwdWJsaWMgZG9uZTogKHZhbHVlOiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcHVibGljIGZhaWw6IChlcnJvcj86IGFueSkgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZG9uZSA9IHZhbHVlID0+IHJlc29sdmUodmFsdWUpO1xuICAgICAgdGhpcy5mYWlsID0gZXJyb3IgPT4gcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRpbWVPdXQoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///187\n')},433:(__unused_webpack_module,exports)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetworkHandle = exports.HttpResponse = exports.HttpRequest = void 0;\nclass HttpRequest {\n    constructor(url) {\n        this.method_ = 'GET';\n        this.headers_ = new Map();\n        this.body_ = null;\n        this.responseType_ = 'arraybuffer';\n        this.url_ = url;\n    }\n    get url() {\n        return this.url_;\n    }\n    set url(newUrl) {\n        this.url_ = newUrl;\n    }\n    get method() {\n        return this.method_;\n    }\n    set method(newMethod) {\n        this.method_ = newMethod;\n    }\n    get responseType() {\n        return this.responseType_;\n    }\n    set responseType(newResponseType) {\n        this.responseType_ = newResponseType;\n    }\n    get body() {\n        return this.body_;\n    }\n    set body(body) {\n        this.body_ = body;\n    }\n    get headers() {\n        return this.headers_;\n    }\n    setHeader(key, value) {\n        this.headers_.set(key, value);\n    }\n}\nexports.HttpRequest = HttpRequest;\nclass HttpResponse {\n    constructor(request, status, headers, data, ok, message) {\n        this.message_ = '';\n        this.request_ = request;\n        this.status_ = status;\n        this.headers_ = headers;\n        this.data_ = data;\n        this.ok_ = ok;\n        this.message_ = message;\n    }\n    get request() {\n        return this.request_;\n    }\n    get status() {\n        return this.status_;\n    }\n    get headers() {\n        return this.headers_;\n    }\n    get data() {\n        return this.data_;\n    }\n    get ok() {\n        return this.ok_;\n    }\n    get message() {\n        return this.message_;\n    }\n}\nexports.HttpResponse = HttpResponse;\nclass NetworkHandle {\n    static fetch(request) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(request.method, request.url);\n            xhr.responseType = request.responseType;\n            request.headers.forEach((value, name) => {\n                xhr.setRequestHeader(name, value);\n            });\n            const makeResponse = (isOk) => {\n                return new HttpResponse(request, xhr.status, xhr.getAllResponseHeaders(), xhr.response, isOk, xhr.statusText);\n            };\n            xhr.onload = ev => {\n                const response = makeResponse(xhr.status >= 200 && xhr.status < 300);\n                if (response.ok) {\n                    resolve(response);\n                }\n                else {\n                    reject(response);\n                }\n            };\n            xhr.onerror =\n                xhr.ontimeout =\n                    xhr.onabort =\n                        ev => {\n                            reject(makeResponse(false));\n                        };\n            xhr.send(request.body);\n        });\n    }\n}\nexports.NetworkHandle = NetworkHandle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///433\n")},377:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.TimeRangesUtils = void 0;\nclass TimeRangesUtils {\n    static getBufferedInfo(b) {\n        if (!b) {\n            return [];\n        }\n        const ret = [];\n        for (let i = 0; i < b.length; i++) {\n            ret.push({ start: b.start(i), end: b.end(i) });\n        }\n        return ret;\n    }\n    static bufferedAheadOf(b, time) {\n        if (!b || !b.length) {\n            return 0;\n        }\n        // Workaround Safari bug: https://bit.ly/2trx6O8\n        if (b.length === 1 && b.end(0) - b.start(0) < 1e-6) {\n            return 0;\n        }\n        // We calculate the buffered amount by ONLY accounting for the content\n        // buffered (i.e. we ignore the times of the gaps).  We also buffer through\n        // all gaps.\n        // Therefore, we start at the end and add up all buffers until |time|.\n        let result = 0;\n        for (const { start, end } of TimeRangesUtils.getBufferedInfo(b)) {\n            if (end > time) {\n                result += end - Math.max(start, time);\n            }\n        }\n        return result;\n    }\n}\nexports.TimeRangesUtils = TimeRangesUtils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc3LmpzIiwibWFwcGluZ3MiOiI7OztBQUtBLE1BQWEsZUFBZTtJQUMxQixNQUFNLENBQUMsZUFBZSxDQUFDLENBQWE7UUFDbEMsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNOLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFhLEVBQUUsSUFBWTtRQUNoRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNuQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtZQUNsRCxPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsc0VBQXNFO1FBQ3RFLDJFQUEyRTtRQUMzRSxZQUFZO1FBQ1osc0VBQXNFO1FBQ3RFLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNmLEtBQUssTUFBTSxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUMsSUFBSSxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdELElBQUksR0FBRyxHQUFHLElBQUksRUFBRTtnQkFDZCxNQUFNLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFsQ0QsMENBa0NDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW9kYS8uL3NyYy91dGlscy90aW1lLXJhbmdlcy50cz9jN2RlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEJ1ZmZlcmVkUmFuZ2UgPSB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNsYXNzIFRpbWVSYW5nZXNVdGlscyB7XG4gIHN0YXRpYyBnZXRCdWZmZXJlZEluZm8oYjogVGltZVJhbmdlcyk6IEJ1ZmZlcmVkUmFuZ2VbXSB7XG4gICAgaWYgKCFiKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0LnB1c2goe3N0YXJ0OiBiLnN0YXJ0KGkpLCBlbmQ6IGIuZW5kKGkpfSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgYnVmZmVyZWRBaGVhZE9mKGI6IFRpbWVSYW5nZXMsIHRpbWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKCFiIHx8ICFiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIFdvcmthcm91bmQgU2FmYXJpIGJ1ZzogaHR0cHM6Ly9iaXQubHkvMnRyeDZPOFxuICAgIGlmIChiLmxlbmd0aCA9PT0gMSAmJiBiLmVuZCgwKSAtIGIuc3RhcnQoMCkgPCAxZS02KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBXZSBjYWxjdWxhdGUgdGhlIGJ1ZmZlcmVkIGFtb3VudCBieSBPTkxZIGFjY291bnRpbmcgZm9yIHRoZSBjb250ZW50XG4gICAgLy8gYnVmZmVyZWQgKGkuZS4gd2UgaWdub3JlIHRoZSB0aW1lcyBvZiB0aGUgZ2FwcykuICBXZSBhbHNvIGJ1ZmZlciB0aHJvdWdoXG4gICAgLy8gYWxsIGdhcHMuXG4gICAgLy8gVGhlcmVmb3JlLCB3ZSBzdGFydCBhdCB0aGUgZW5kIGFuZCBhZGQgdXAgYWxsIGJ1ZmZlcnMgdW50aWwgfHRpbWV8LlxuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAoY29uc3Qge3N0YXJ0LCBlbmR9IG9mIFRpbWVSYW5nZXNVdGlscy5nZXRCdWZmZXJlZEluZm8oYikpIHtcbiAgICAgIGlmIChlbmQgPiB0aW1lKSB7XG4gICAgICAgIHJlc3VsdCArPSBlbmQgLSBNYXRoLm1heChzdGFydCwgdGltZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///377\n')},719:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Timer = void 0;\nclass Timer {\n    constructor(handler) {\n        this.timerId_ = null;\n        this.clearMethod_ = null;\n        this.onTick_ = handler;\n    }\n    tickAfter(seconds) {\n        return this.setTimer_(seconds, false);\n    }\n    tickEvery(seconds) {\n        return this.setTimer_(seconds, true);\n    }\n    clear() {\n        if (this.timerId_ && this.clearMethod_) {\n            this.clearMethod_(this.timerId_);\n            this.timerId_ = null;\n            this.clearMethod_ = null;\n        }\n    }\n    setTimer_(seconds, isPeriodic) {\n        this.clear();\n        const cb = () => {\n            if (this.timerId_) {\n                this.onTick_();\n            }\n        };\n        if (isPeriodic) {\n            this.timerId_ = window.setInterval(cb, seconds * 1000);\n            this.clearMethod_ = clearInterval.bind(window);\n        }\n        else {\n            this.timerId_ = window.setTimeout(cb, seconds * 1000);\n            this.clearMethod_ = clearTimeout.bind(window);\n        }\n        return this;\n    }\n}\nexports.Timer = Timer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE5LmpzIiwibWFwcGluZ3MiOiI7OztBQUVBLE1BQWEsS0FBSztJQUtoQixZQUFZLE9BQWlCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBZTtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBZTtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLE9BQWUsRUFBRSxVQUFtQjtRQUNwRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFYixNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNoQjtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0M7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQTlDRCxzQkE4Q0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b2RhLy4vc3JjL3V0aWxzL3RpbWVyLnRzPzI4ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJVGltZXJ9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgVGltZXIgaW1wbGVtZW50cyBJVGltZXIge1xuICBwcml2YXRlIHRpbWVySWRfOiBudW1iZXIgfCBudWxsO1xuICBwcml2YXRlIGNsZWFyTWV0aG9kXzogRnVuY3Rpb24gfCBudWxsO1xuICBwcml2YXRlIG9uVGlja186IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKGhhbmRsZXI6IEZ1bmN0aW9uKSB7XG4gICAgdGhpcy50aW1lcklkXyA9IG51bGw7XG4gICAgdGhpcy5jbGVhck1ldGhvZF8gPSBudWxsO1xuICAgIHRoaXMub25UaWNrXyA9IGhhbmRsZXI7XG4gIH1cblxuICB0aWNrQWZ0ZXIoc2Vjb25kczogbnVtYmVyKTogSVRpbWVyIHtcbiAgICByZXR1cm4gdGhpcy5zZXRUaW1lcl8oc2Vjb25kcywgZmFsc2UpO1xuICB9XG5cbiAgdGlja0V2ZXJ5KHNlY29uZHM6IG51bWJlcik6IElUaW1lciB7XG4gICAgcmV0dXJuIHRoaXMuc2V0VGltZXJfKHNlY29uZHMsIHRydWUpO1xuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGltZXJJZF8gJiYgdGhpcy5jbGVhck1ldGhvZF8pIHtcbiAgICAgIHRoaXMuY2xlYXJNZXRob2RfKHRoaXMudGltZXJJZF8pO1xuICAgICAgdGhpcy50aW1lcklkXyA9IG51bGw7XG4gICAgICB0aGlzLmNsZWFyTWV0aG9kXyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRUaW1lcl8oc2Vjb25kczogbnVtYmVyLCBpc1BlcmlvZGljOiBib29sZWFuKTogSVRpbWVyIHtcbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBjb25zdCBjYiA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRpbWVySWRfKSB7XG4gICAgICAgIHRoaXMub25UaWNrXygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoaXNQZXJpb2RpYykge1xuICAgICAgdGhpcy50aW1lcklkXyA9IHdpbmRvdy5zZXRJbnRlcnZhbChjYiwgc2Vjb25kcyAqIDEwMDApO1xuICAgICAgdGhpcy5jbGVhck1ldGhvZF8gPSBjbGVhckludGVydmFsLmJpbmQod2luZG93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lcklkXyA9IHdpbmRvdy5zZXRUaW1lb3V0KGNiLCBzZWNvbmRzICogMTAwMCk7XG4gICAgICB0aGlzLmNsZWFyTWV0aG9kXyA9IGNsZWFyVGltZW91dC5iaW5kKHdpbmRvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///719\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(607);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));