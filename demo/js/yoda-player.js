!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define([],U):"object"==typeof exports?exports.yoda=U():Q.yoda=U()}(self,(()=>(()=>{"use strict";var __webpack_modules__={743:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ src)\n});\n\n;// CONCATENATED MODULE: ./src/dash/types.ts\nvar MediaType;\n(function (MediaType) {\n    MediaType[\"VIDEO\"] = \"video\";\n    MediaType[\"AUDIO\"] = \"audio\";\n})(MediaType || (MediaType = {}));\nvar StreamType;\n(function (StreamType) {\n    StreamType[StreamType[\"LIVE\"] = 0] = \"LIVE\";\n    StreamType[StreamType[\"VOD\"] = 1] = \"VOD\";\n})(StreamType || (StreamType = {}));\n\n;// CONCATENATED MODULE: ./src/dash/parser-utils.ts\n/**\n * A collection of utility methods to parse MPEG-DASH manifests.\n */\nclass ParserUtils {\n    static parseXml(data) {\n        let parser = new DOMParser();\n        let xml = parser.parseFromString(data, 'text/xml');\n        if (xml && xml.documentElement.tagName === 'MPD') {\n            return xml.documentElement;\n        }\n        return null;\n    }\n    static getChildren(node, tagName) {\n        const childElements = [];\n        for (const child of node.childNodes) {\n            if (child instanceof Element && child.tagName === tagName) {\n                childElements.push(child);\n            }\n        }\n        return childElements;\n    }\n    static getFirstChild(node, tagName) {\n        const children = ParserUtils.getChildren(node, tagName);\n        return (children === null || children === void 0 ? void 0 : children[0]) || null;\n    }\n    static parseIsoDuration(durationString) {\n        const secondsInYear = 365 * 24 * 60 * 60;\n        const secondsInMonth = 30 * 24 * 60 * 60;\n        const secondsInDay = 24 * 60 * 60;\n        const secondsInHour = 60 * 60;\n        const secondsInMinute = 60;\n        if (!durationString) {\n            return null;\n        }\n        const regex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\n        const match = regex.exec(durationString);\n        let duration = (parseFloat((match === null || match === void 0 ? void 0 : match[2]) || '0') * secondsInYear +\n            parseFloat((match === null || match === void 0 ? void 0 : match[4]) || '0') * secondsInMonth +\n            parseFloat((match === null || match === void 0 ? void 0 : match[6]) || '0') * secondsInDay +\n            parseFloat((match === null || match === void 0 ? void 0 : match[8]) || '0') * secondsInHour +\n            parseFloat((match === null || match === void 0 ? void 0 : match[10]) || '0') * secondsInMinute +\n            parseFloat((match === null || match === void 0 ? void 0 : match[12]) || '0'));\n        if (typeof (match === null || match === void 0 ? void 0 : match[1]) !== 'undefined') {\n            duration = -duration;\n        }\n        return duration;\n    }\n    static parseDate(dateString) {\n        if (!dateString) {\n            return null;\n        }\n        // Make sure to use UTC time instead of local time zone\n        if (!dateString.endsWith('Z')) {\n            dateString += 'Z';\n        }\n        const result = Date.parse(dateString);\n        return (!isNaN(result) ? Math.floor(result / 1000.0) : null);\n    }\n    static resolveTemplateUrl(url, identifiers, baseUrl) {\n        let resolvedTemplate = url;\n        if (identifiers.representationId) {\n            resolvedTemplate = resolvedTemplate.replace('$RepresentationID$', String(identifiers.representationId));\n        }\n        if (identifiers.number) {\n            resolvedTemplate = resolvedTemplate.replace('$Number$', String(identifiers.number));\n        }\n        if (identifiers.subNumber) {\n            resolvedTemplate = resolvedTemplate.replace('$SubNumber$', String(identifiers.number));\n        }\n        if (identifiers.bandwidth) {\n            resolvedTemplate = resolvedTemplate.replace('$Bandwidth$', String(identifiers.bandwidth));\n        }\n        if (identifiers.time) {\n            resolvedTemplate = resolvedTemplate.replace('$Time$', String(identifiers.time));\n        }\n        if (baseUrl === null || baseUrl === void 0 ? void 0 : baseUrl.startsWith('http')) {\n            resolvedTemplate = new window.URL(resolvedTemplate, baseUrl).href;\n        }\n        return resolvedTemplate;\n    }\n    static getTypeFromMimeType(mimeType) {\n        if (!mimeType) {\n            return '';\n        }\n        return mimeType.split('/')[0] || '';\n    }\n    static getFullMimeType(stream) {\n        let fullMimeType = stream.mimeType;\n        if (stream.codecs) {\n            fullMimeType += '; codecs=\"' + stream.codecs + '\"';\n        }\n        return fullMimeType;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/async-task.ts\nclass AsyncTask {\n    constructor() {\n        this.done = () => { };\n        this.fail = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.done = (value) => resolve(value);\n            this.fail = (error) => reject(error);\n        });\n    }\n    timeOut() {\n        return this;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/time-ranges.ts\nclass TimeRangesUtils {\n    static getBufferedInfo(b) {\n        if (!b) {\n            return [];\n        }\n        const ret = [];\n        for (let i = 0; i < b.length; i++) {\n            ret.push({ start: b.start(i), end: b.end(i) });\n        }\n        return ret;\n    }\n    static bufferedAheadOf(b, time) {\n        if (!b || !b.length) {\n            return 0;\n        }\n        // Workaround Safari bug: https://bit.ly/2trx6O8\n        if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) {\n            return 0;\n        }\n        // We calculate the buffered amount by ONLY accounting for the content\n        // buffered (i.e. we ignore the times of the gaps).  We also buffer through\n        // all gaps.\n        // Therefore, we start at the end and add up all buffers until |time|.\n        let result = 0;\n        for (const { start, end } of TimeRangesUtils.getBufferedInfo(b)) {\n            if (end > time) {\n                result += end - Math.max(start, time);\n            }\n        }\n        return result;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/mse-adapter.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n/**\n * The a wrapper class around the MSE APIs to provide a \"better\" handle thereof.\n */\nclass MseAdapter {\n    constructor(video) {\n        this.mediaSource_ = null;\n        this.objectUrl_ = '';\n        this.sourceBuffers_ = new Map();\n        this.appendQ_ = new Map();\n        this.video_ = video;\n        this.mediaSourceOpenTask_ = new AsyncTask();\n        this.onUpdateEndVideo_ = (_) => {\n            this.onUpdateEnd_(MediaType.VIDEO);\n        };\n        this.onErrorVideo_ = (e) => {\n            console.log('(mse) video source buffer error', e);\n        };\n        this.onUpdateEndAudio_ = (_) => {\n            this.onUpdateEnd_(MediaType.AUDIO);\n        };\n        this.onErrorAudio_ = (e) => {\n            console.log('(mse) audio source buffer error', e);\n        };\n    }\n    openMediaSource() {\n        const onSourceOpen = () => {\n            var _a;\n            console.log('media source is open...');\n            (_a = this.mediaSource_) === null || _a === void 0 ? void 0 : _a.removeEventListener('sourceopen', onSourceOpen);\n            this.mediaSourceOpenTask_.done();\n        };\n        this.mediaSource_ = new MediaSource();\n        this.mediaSource_.addEventListener('sourceopen', onSourceOpen);\n        this.objectUrl_ = window.URL.createObjectURL(this.mediaSource_);\n        this.video_.src = this.objectUrl_;\n        return this.mediaSourceOpenTask_.promise;\n    }\n    stop() {\n        // TODO - Abort ongoing operations on source buffers first!\n        this.sourceBuffers_.forEach((sourceBuffer, mediaType) => {\n            if (mediaType === MediaType.VIDEO) {\n                sourceBuffer.removeEventListener('error', this.onErrorVideo_);\n                sourceBuffer.removeEventListener('updateend', this.onUpdateEndVideo_);\n            }\n        });\n    }\n    closeMediaSource() {\n        this.stop();\n        if (this.objectUrl_) {\n            window.URL.revokeObjectURL(this.objectUrl_);\n        }\n        this.sourceBuffers_.forEach(sourceBuffer => {\n            var _a;\n            (_a = this.mediaSource_) === null || _a === void 0 ? void 0 : _a.removeSourceBuffer(sourceBuffer);\n        });\n        this.mediaSource_ = null;\n    }\n    ;\n    setupSourceBuffers(streamMap) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.mediaSourceOpenTask_;\n            if (!this.mediaSource_) {\n                throw new Error('No MediaSource!');\n            }\n            const videoStream = streamMap.get(MediaType.VIDEO);\n            const audioStream = streamMap.get(MediaType.AUDIO);\n            if (videoStream) {\n                this.addSourceBuffer_(MediaType.VIDEO, videoStream);\n            }\n            if (audioStream) {\n                this.addSourceBuffer_(MediaType.AUDIO, audioStream);\n            }\n            if (this.sourceBuffers_.size < 1) {\n                console.warn('Could not setup source buffers...');\n            }\n        });\n    }\n    appendBuffer(mediaType, data) {\n        var _a;\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            if (!this.appendQ_.has(mediaType)) {\n                this.appendQ_.set(mediaType, []);\n            }\n            const appendContext = {\n                mediaType,\n                data,\n                operation: new AsyncTask(),\n                scheduled: false\n            };\n            (_a = this.appendQ_.get(mediaType)) === null || _a === void 0 ? void 0 : _a.push(appendContext);\n            this.runQueue_(mediaType);\n            return appendContext.operation.promise;\n        }\n        return Promise.reject();\n    }\n    setCurrentTime(time) {\n        console.assert(time >= 0, 'Current time can not be negative');\n        this.video_.currentTime = time;\n    }\n    setDuration(duration) {\n        if (this.mediaSource_) {\n            this.mediaSource_.duration = duration;\n        }\n    }\n    getBufferEnd(mediaType) {\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            try {\n                const ranges = sourceBuffer.buffered;\n                if (ranges !== null && typeof ranges !== 'undefined' && ranges.length) {\n                    return ranges.end(ranges.length - 1);\n                }\n            }\n            catch (e) {\n                console.error('Could not get time ranges for ', mediaType, e);\n            }\n        }\n        return null;\n    }\n    getBufferedAheadOf(mediaType, time) {\n        let bufferedAhead = 0;\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        if (sourceBuffer) {\n            try {\n                const ranges = sourceBuffer.buffered;\n                bufferedAhead = TimeRangesUtils.bufferedAheadOf(ranges, time);\n            }\n            catch (e) {\n                console.error('Could not get time ranges for ', mediaType, e);\n            }\n        }\n        return bufferedAhead;\n    }\n    onUpdateEnd_(mediaType) {\n        const queue = this.appendQ_.get(mediaType);\n        // Pop from queue\n        const context = queue === null || queue === void 0 ? void 0 : queue.shift();\n        if (context) {\n            console.assert(context.scheduled, 'Bug: (mse) first item in the queue should have been scheduled!');\n            // Resolve operation promise\n            context.operation.done();\n            // Run queue\n            this.runQueue_(mediaType);\n        }\n    }\n    runQueue_(mediaType) {\n        const sourceBuffer = this.sourceBuffers_.get(mediaType);\n        const queue = this.appendQ_.get(mediaType);\n        console.assert(!!queue || !!sourceBuffer, 'Bug: (mse) invalid call to runQueue_()');\n        if (!queue || !sourceBuffer) {\n            console.warn('Unsuccessful attempt to update buffer');\n            return;\n        }\n        if (queue.length === 0) {\n            // Nothing to to\n            return;\n        }\n        if (sourceBuffer.updating) {\n            // Wait for updateend\n            return;\n        }\n        // FIFO\n        const next = queue[0];\n        console.assert(!next.scheduled, 'Bug: (mse) found scheduled item in run queue!');\n        next.scheduled = true;\n        sourceBuffer.appendBuffer(new Uint8Array(next.data));\n    }\n    /**\n     * Create a source buffer for |mediaType| and add it to the media source\n     * @param mediaType\n     * @param stream\n     */\n    addSourceBuffer_(mediaType, stream) {\n        if (this.mediaSource_) {\n            const fullMimeType = ParserUtils.getFullMimeType(stream);\n            const supportedByPlatform = MediaSource.isTypeSupported(fullMimeType);\n            console.assert(mediaType === MediaType.VIDEO || mediaType === MediaType.AUDIO, 'Invalid media type!');\n            console.assert(supportedByPlatform, 'Type must supported by platform!', fullMimeType);\n            if (!supportedByPlatform) {\n                console.warn(`Skipping ${mediaType} stream because not supported by platform.`);\n                return;\n            }\n            const sourceBuffer = this.mediaSource_.addSourceBuffer(fullMimeType);\n            if (mediaType === MediaType.VIDEO) {\n                sourceBuffer.addEventListener('updateend', this.onUpdateEndVideo_);\n                sourceBuffer.addEventListener('error', this.onErrorVideo_);\n                this.sourceBuffers_.set(MediaType.VIDEO, sourceBuffer);\n            }\n            if (mediaType === MediaType.AUDIO) {\n                sourceBuffer.addEventListener('updateend', this.onUpdateEndAudio_);\n                sourceBuffer.addEventListener('error', this.onErrorAudio_);\n                this.sourceBuffers_.set(MediaType.AUDIO, sourceBuffer);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/timer.ts\nclass Timer {\n    constructor(handler) {\n        this.timerId_ = null;\n        this.clearMethod_ = null;\n        this.onTick_ = handler;\n    }\n    tickAfter(seconds) {\n        return this.setTimer_(seconds, false);\n    }\n    tickEvery(seconds) {\n        return this.setTimer_(seconds, true);\n    }\n    clear() {\n        if (this.timerId_ && this.clearMethod_) {\n            this.clearMethod_(this.timerId_);\n            this.timerId_ = null;\n            this.clearMethod_ = null;\n        }\n    }\n    setTimer_(seconds, isPeriodic) {\n        this.clear();\n        const cb = () => {\n            if (this.timerId_) {\n                this.onTick_();\n            }\n        };\n        if (isPeriodic) {\n            this.timerId_ = window.setInterval(cb, seconds * 1000);\n            this.clearMethod_ = clearInterval.bind(window);\n        }\n        else {\n            this.timerId_ = window.setTimeout(cb, seconds * 1000);\n            this.clearMethod_ = clearTimeout.bind(window);\n        }\n        return this;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/network.ts\nclass HttpRequest {\n    constructor(url) {\n        this.method_ = 'GET';\n        this.headers_ = new Map();\n        this.body_ = null;\n        this.responseType_ = 'arraybuffer';\n        this.url_ = url;\n    }\n    get url() {\n        return this.url_;\n    }\n    set url(newUrl) {\n        this.url_ = newUrl;\n    }\n    get method() {\n        return this.method_;\n    }\n    set method(newMethod) {\n        this.method_ = newMethod;\n    }\n    get responseType() {\n        return this.responseType_;\n    }\n    set responseType(newResponseType) {\n        this.responseType_ = newResponseType;\n    }\n    get body() {\n        return this.body_;\n    }\n    set body(body) {\n        this.body_ = body;\n    }\n    get headers() {\n        return this.headers_;\n    }\n    setHeader(key, value) {\n        this.headers_.set(key, value);\n    }\n}\nclass HttpResponse {\n    constructor(request, status, headers, data, ok, message) {\n        this.message_ = '';\n        this.request_ = request;\n        this.status_ = status;\n        this.headers_ = headers;\n        this.data_ = data;\n        this.ok_ = ok;\n        this.message_ = message;\n    }\n    get request() {\n        return this.request_;\n    }\n    get status() {\n        return this.status_;\n    }\n    get headers() {\n        return this.headers_;\n    }\n    get data() {\n        return this.data_;\n    }\n    get ok() {\n        return this.ok_;\n    }\n    get message() {\n        return this.message_;\n    }\n}\nclass NetworkHandle {\n    static fetch(request) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(request.method, request.url);\n            xhr.responseType = request.responseType;\n            request.headers.forEach((value, name) => {\n                xhr.setRequestHeader(name, value);\n            });\n            const makeResponse = (isOk) => {\n                return new HttpResponse(request, xhr.status, xhr.getAllResponseHeaders(), xhr.response, isOk, xhr.statusText);\n            };\n            xhr.onload = (ev) => {\n                const response = makeResponse((xhr.status >= 200 && xhr.status < 300));\n                if (response.ok) {\n                    resolve(response);\n                }\n                else {\n                    reject(response);\n                }\n            };\n            xhr.onerror = xhr.ontimeout = xhr.onabort = (ev) => {\n                reject(makeResponse(false));\n            };\n            xhr.send(request.body);\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/streamer.ts\nvar streamer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n/**\n * The Streamer\n *\n * This class is responsible for streaming the media content by leveraging\n * the MSE APIs (via the MSE Adapter).\n */\nclass Streamer {\n    constructor(mseAdapter, presentation) {\n        this.mediaStates_ = new Map();\n        this.startTime_ = null;\n        this.stopped_ = false;\n        this.scheduleInterval = 0.25;\n        this.mse_ = mseAdapter;\n        this.presentation_ = presentation;\n    }\n    /**\n     * This method sets up the streamer. It needs to be called first!\n     * Upon call, it will open the media source and setup source buffers for\n     * streams in |streamMap|. Futhermore it will create an internal media state\n     * for each stream in |streamMap|; the media state keeps record of the\n     * stream's context the streamer needs to operate correctly.\n     *\n     * @param streamMap A map containing initial streams\n     * @returns Promise\n     */\n    setup(streamMap) {\n        return streamer_awaiter(this, void 0, void 0, function* () {\n            yield this.mse_.openMediaSource();\n            yield this.mse_.setupSourceBuffers(streamMap);\n            // Create media states\n            streamMap.forEach((stream, mediatType) => {\n                if (mediatType === MediaType.VIDEO) {\n                    if (!this.mediaStates_.has(mediatType)) {\n                        this.mediaStates_.set(mediatType, this.createMediaState_(mediatType, stream));\n                    }\n                }\n                if (mediatType === MediaType.AUDIO) {\n                    if (!this.mediaStates_.has(mediatType)) {\n                        this.mediaStates_.set(mediatType, this.createMediaState_(mediatType, stream));\n                    }\n                }\n            });\n            // This operation is successful is we could setup all streams.\n            console.assert(streamMap.size === this.mediaStates_.size, 'Should have media states for all types');\n            // Set duration\n            const stream = streamMap.get(MediaType.VIDEO) || streamMap.get(MediaType.AUDIO);\n            // TODO - Add getDuration() to IPresentation\n            let duration = stream === null || stream === void 0 ? void 0 : stream.segmentIndex.getEndTime();\n            if (!duration) {\n                throw new Error('Could not set stream duration!');\n            }\n            if (this.presentation_.isLive()) {\n                duration = Number.MAX_SAFE_INTEGER;\n            }\n            this.mse_.setDuration(duration);\n        });\n    }\n    /**\n     * Start the streaming. At this point the media source and source buffers\n     * are set. This method will set the stream start time and active\n     * the schedule timer for each media state.\n     *\n     * @returns True if successful, false otherwise.\n     */\n    start() {\n        if (this.mediaStates_.size === 0) {\n            console.warn('Streams needs to be setup before start. No-op...');\n            return false;\n        }\n        if (this.startTime_) {\n            console.warn('Streaming already started...');\n            return false;\n        }\n        this.stopped_ = false;\n        this.startTime_ = 0;\n        // For live stream calculate 'tune-in' time.\n        if (this.presentation_.isLive()) {\n            const presentationDelay = this.presentation_.getDelay();\n            this.startTime_ = Math.max(0, this.getLiveEdge_() - presentationDelay);\n        }\n        const mediaState = this.mediaStates_.get(MediaType.VIDEO) ||\n            this.mediaStates_.get(MediaType.AUDIO);\n        console.assert(mediaState === null || mediaState === void 0 ? void 0 : mediaState.stream.segmentIndex.hasTime(this.startTime_), 'Bug: Start time is not within the presentation timeline');\n        console.log('Start time:', this.startTime_);\n        // Set the start time\n        this.mse_.setCurrentTime(this.startTime_);\n        for (const mediaState of this.mediaStates_.values()) {\n            // Start streaming\n            this.onTick_(mediaState);\n            // Setup scheduler\n            mediaState.scheduleTimer = new Timer(() => this.onTick_(mediaState));\n            mediaState.scheduleTimer.tickEvery(this.scheduleInterval);\n        }\n        return true;\n    }\n    /**\n     * Stop streaming.\n     */\n    stop() {\n        var _a;\n        this.stopped_ = true;\n        this.mse_.closeMediaSource();\n        for (const mediaState of this.mediaStates_.values()) {\n            (_a = mediaState.scheduleTimer) === null || _a === void 0 ? void 0 : _a.clear();\n            mediaState.updating = false;\n        }\n    }\n    /**\n     * @returns The presentation time we started streaming at\n     */\n    getStartTime() {\n        return this.startTime_;\n    }\n    /**\n     * Get the stream of type |mediaType| being currently buffered\n     *\n     * @param mediaType The media type\n     * @returns The active |mediaType| stream or null\n     */\n    getActiveStream(mediaType) {\n        const mediaState = this.mediaStates_.get(mediaType);\n        if (mediaState) {\n            return mediaState.stream;\n        }\n        return null;\n    }\n    /**\n     * Called when a stream's scheduler timer ticked. This will check, for an\n     * idling stream, if there is a segment to download in which case\n     * |fetchAndAppend_()| will be called to perform the actually download\n     * and push the data to the source buffer (via the MSE adapter).\n     *\n     * @param mediaState The media state of the currently scheduled stream.\n     * @returns Promise.\n     */\n    onTick_(mediaState) {\n        return streamer_awaiter(this, void 0, void 0, function* () {\n            if (this.stopped_) {\n                // Streaming has been stopped\n                return;\n            }\n            if (mediaState.updating) {\n                // Media state is still updating\n                return;\n            }\n            // Check if we should buffer more\n            const bufferingGoal = 30;\n            const playheadPosition = this.presentation_.getPosition();\n            const bufferedAhead = this.mse_.getBufferedAheadOf(mediaState.type, playheadPosition);\n            if (bufferedAhead > bufferingGoal) {\n                return;\n            }\n            mediaState.updating = true;\n            try {\n                let timeNeeded = this.getTimeNeeded_(mediaState);\n                const nextSegment = mediaState.stream.segmentIndex.find(timeNeeded);\n                if (nextSegment) {\n                    if (mediaState.needInit) {\n                        const initSegment = mediaState.stream.initialization;\n                        yield this.fetchAndAppend_(mediaState, initSegment);\n                    }\n                    yield this.fetchAndAppend_(mediaState, nextSegment);\n                    mediaState.lastSegment = nextSegment;\n                }\n            }\n            catch (e) {\n                const netRespone = e;\n                if (netRespone.status && netRespone.status === 404) {\n                    console.info('Segment present in manifest but server returned HTTP 404.', 'Will rety...');\n                }\n                else {\n                    console.error('(streaming) Fetch and append failed...', e);\n                    // throw e;\n                }\n            }\n            finally {\n                mediaState.updating = false;\n            }\n        });\n    }\n    /**\n     * Fetch segment and push data to buffer.\n     *\n     * @param mediaState The stream's state/context.\n     * @param segment The segment to download.\n     */\n    fetchAndAppend_(mediaState, segment) {\n        return streamer_awaiter(this, void 0, void 0, function* () {\n            const request = new HttpRequest(segment.url);\n            request.responseType = 'arraybuffer';\n            const response = yield NetworkHandle.fetch(request);\n            yield this.mse_.appendBuffer(mediaState.type, response.data);\n            if (segment.isInit) {\n                mediaState.needInit = false;\n            }\n        });\n    }\n    /**\n     * Get next timestamp we need to buffer.\n     *\n     * @param mediaState The stream state/context.\n     * @returns The time needed.\n     */\n    getTimeNeeded_(mediaState) {\n        if (mediaState.lastSegment) {\n            return mediaState.lastSegment.end;\n        }\n        return this.presentation_.getPosition();\n    }\n    /**\n     * Computes the live edge.\n     * @returns The live edge\n     */\n    getLiveEdge_() {\n        console.assert(this.presentation_.isLive(), 'Invalid call to getLiveEdge_()');\n        const maxSegmentDuration = this.presentation_.getMaxSegmentDuration();\n        const presentationStartTime = this.presentation_.getStartTime();\n        const now = Date.now() / 1000;\n        return Math.max(0, now - maxSegmentDuration - presentationStartTime);\n    }\n    createMediaState_(type, stream) {\n        return {\n            type,\n            stream,\n            needInit: true,\n            lastSegment: null,\n            updating: false,\n            scheduleTimer: null\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/dash/segment-index.ts\n/**\n * Creates a segment index.\n */\nclass SegmentIndex {\n    constructor(segments) {\n        this.segments_ = segments;\n    }\n    /**\n     * Get All segments in this index.\n     * @returns All segments in the index.\n     */\n    getSegments() {\n        return this.segments_;\n    }\n    /**\n     * Add new segment to the index.\n     * @param newSegments\n     */\n    merge(newSegments) {\n        if (newSegments.length < 1) {\n            return;\n        }\n        const currentEndTime = this.getEndTime(true);\n        // console.log('Current timeline end:', currentEndTime);\n        // Extend current index with new segments\n        for (let i = 0; i < newSegments.length; i++) {\n            const newSegment = newSegments[i];\n            if (newSegment.unscaledStart >= currentEndTime) {\n                this.segments_.push(newSegment);\n                // console.log(\n                //   'Added new segment to index. Start:', newSegment.unscaledStart,\n                //   'End:', (newSegment.unscaledStart + newSegment.unscaledDuration));\n            }\n        }\n        if (!this.isContiguous(this.segments_)) {\n            console.warn('The segment timeline is not contiguous. ' +\n                'This might lead to playback issues');\n        }\n    }\n    /**\n     * Search the index for a segment that contains the providedn |time|.\n     *\n     * @param time\n     * @returns The segment that contains |time| or null.\n     */\n    find(time) {\n        for (const segment of this.segments_) {\n            if ((segment.start <= time) && (time < segment.end)) {\n                return segment;\n            }\n        }\n        console.warn('Could not find segment for time:' + time + '.', 'Segment count: ' + (this.segments_.length - 1), 'Last end: ' + this.getEndTime());\n        return null;\n    }\n    /**\n     * Get the index start time.\n     *\n     * @param unscaled Whether or not the return the unscaled time\n     * @returns Start time.\n     */\n    getStartTime(unscaled) {\n        if (this.segments_.length > 0) {\n            const first = this.segments_[this.segments_.length - 1];\n            return (unscaled ? first.start : first.unscaledStart);\n        }\n        return 0;\n    }\n    /**\n     * Get the index end time.\n     *\n     * @param unscaled Whether or not the return the unscaled time\n     * @returns End time.\n     */\n    getEndTime(unscaled) {\n        if (this.segments_.length > 0) {\n            const last = this.segments_[this.segments_.length - 1];\n            return unscaled ? last.unscaledEnd : last.end;\n        }\n        return 0;\n    }\n    /**\n     * Evicts segment from the index, that have fallen out of the provided\n     * window length.\n     *\n     * @param dvrWindowLength DVR window length\n     */\n    adjustDvrWindow(dvrWindowLength) {\n        const windowStart = this.getEndTime() - dvrWindowLength;\n        const oldSize = this.segments_.length;\n        this.segments_ =\n            this.segments_.filter(segment => segment.end > windowStart);\n        const newSize = this.segments_.length;\n        console.log('Evicted ' + (oldSize - newSize) + ' segments.');\n    }\n    /**\n     * Checks if the provided media segments constitute a contiguous timeline.\n     *\n     * @param segments Array of media segments\n     * @returns True if timeline is contiguous, false otherwise.\n     */\n    isContiguous(segments) {\n        if (segments.length < 2) {\n            return true;\n        }\n        for (let i = 1; i < segments.length; i++) {\n            const prev = segments[i - 1];\n            const curr = segments[i];\n            const prevEnd = prev.unscaledStart + prev.unscaledDuration;\n            if (curr.unscaledStart - prevEnd !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the timeline formed by the segments currently in the index\n     * includes the provided |time|.\n     * @param time Time to check\n     * @returns True if |time| in segment timeline.\n     */\n    hasTime(time) {\n        const firstSegment = this.segments_[0];\n        const lastSegment = this.segments_[this.segments_.length - 1];\n        const firstSegmentStart = firstSegment.start;\n        const lastSegmentEnd = lastSegment.end;\n        return (firstSegmentStart <= time) && (time <= lastSegmentEnd);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/dash/manifest-parser.ts\nvar manifest_parser_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n/**\n * A MPEG-DASH Manifest parser.\n *\n * The parser is tailored to consume Zattoo Live stream with respect of the\n * scope of the case study. MPEG-DASH feature beyond the scope of the case\n * study may not be supported.\n */\nclass ManifestParser {\n    constructor() {\n        this.manifestUrl_ = '';\n        this.manifest_ = null;\n        this.maxSegmentDuration_ = -1;\n        this.presentationDuration_ = null;\n        this.streamMap_ = new Map();\n        this.globalId_ = 0;\n        this.refreshTimer_ = new Timer(() => this.refreshManifest_());\n    }\n    /**\n     * Starts the parser. This method will load and parse the manifest.\n     *\n     * @param manifestUrl The manifest URL\n     * @returns Promise containing the parsed manifest.\n     */\n    start(manifestUrl) {\n        return manifest_parser_awaiter(this, void 0, void 0, function* () {\n            console.log('Manifest parser starts...');\n            this.manifestUrl_ = manifestUrl;\n            this.manifest_ = yield this.loadAndParseManifest_();\n            if (this.manifest_.type === StreamType.LIVE) {\n                this.refreshTimer_.tickAfter(this.manifest_.minUpdatePeriod);\n            }\n            return this.manifest_;\n        });\n    }\n    /**\n     * Stop parsing.\n     */\n    stop() {\n        return manifest_parser_awaiter(this, void 0, void 0, function* () {\n            console.log('Manifest parser stops...');\n            this.refreshTimer_.clear();\n            this.globalId_ = 0;\n            this.streamMap_.clear();\n            this.maxSegmentDuration_ = -1;\n        });\n    }\n    loadAndParseManifest_() {\n        return manifest_parser_awaiter(this, void 0, void 0, function* () {\n            let req = new HttpRequest(this.manifestUrl_);\n            req.responseType = 'text';\n            const respone = yield NetworkHandle.fetch(req);\n            const mpd = ParserUtils.parseXml(respone.data);\n            if (!mpd) {\n                throw new Error('Invalid Manifest');\n            }\n            this.presentationDuration_ =\n                ParserUtils.parseIsoDuration(mpd.getAttribute('mediaPresentationDuration') || '') || null;\n            const presentationType = mpd.getAttribute('type');\n            const minBufferTime = ParserUtils.parseIsoDuration(mpd.getAttribute('minBufferTime') || '') || -1;\n            const presentationStartTime = ParserUtils.parseDate(mpd.getAttribute('availabilityStartTime') || '') || 0;\n            const suggestedPresentationDelay = ParserUtils.parseIsoDuration(mpd.getAttribute('suggestedPresentationDelay') || '');\n            const minimumUpdatePeriod = ParserUtils.parseIsoDuration(mpd.getAttribute('minimumUpdatePeriod') || '') || -1;\n            const dvrWindowLength = ParserUtils.parseIsoDuration(mpd.getAttribute('timeShiftBufferDepth') || '') || Infinity;\n            let presentationDelay = null;\n            const periodNodes = ParserUtils.getChildren(mpd, 'Period');\n            if (periodNodes.length === 0) {\n                console.error('No period found');\n                throw new Error('Invalid manifest: no period found');\n            }\n            if (periodNodes.length > 1) {\n                console.warn('Multi-period manifests not supported. ' +\n                    'Additional periods will be ignored...');\n            }\n            // Multi-period not supported yet!\n            const period = periodNodes[0];\n            const periodDuration = ParserUtils.parseIsoDuration(period.getAttribute('duration') || '') || null;\n            if (!this.presentationDuration_) {\n                if (periodDuration) {\n                    this.presentationDuration_ = periodDuration;\n                }\n                else if (presentationType === 'dynamic') {\n                    this.presentationDuration_ = Number.MAX_SAFE_INTEGER;\n                }\n            }\n            if (!this.presentationDuration_) {\n                throw new Error('Could not determine presentation duration!');\n            }\n            // TODO - Period might contain segment infos\n            const adaptationSetNodes = ParserUtils.getChildren(period, 'AdaptationSet');\n            adaptationSetNodes.forEach(this.parseAdaptationSet_.bind(this));\n            if (suggestedPresentationDelay) {\n                presentationDelay = suggestedPresentationDelay;\n            }\n            else {\n                console.assert(this.maxSegmentDuration_ > 0, 'Bug: Should have set max segment duration!');\n                presentationDelay = Math.round(this.maxSegmentDuration_ * 3);\n            }\n            const manifest = {\n                type: presentationType === 'dynamic' ? StreamType.LIVE : StreamType.VOD,\n                startTime: presentationStartTime,\n                delay: presentationDelay,\n                duration: this.presentationDuration_,\n                dvrWindowLength,\n                minBufferTime,\n                minUpdatePeriod: minimumUpdatePeriod,\n                maxSegmentDuration: this.maxSegmentDuration_,\n                video: this.streamMap_.get(MediaType.VIDEO) || [],\n                audio: this.streamMap_.get(MediaType.AUDIO) || []\n            };\n            // We done parsing clear stream map\n            this.streamMap_.clear();\n            return manifest;\n        });\n    }\n    parseAdaptationSet_(elem) {\n        const id = elem.getAttribute('id') || String(this.globalId_++);\n        const mimeType = elem.getAttribute('mimeType') || '';\n        const codecs = elem.getAttribute('codecs') || '';\n        const contentType = elem.getAttribute('contentType') || ParserUtils.getTypeFromMimeType(mimeType);\n        const segmentTemplate = ParserUtils.getFirstChild(elem, 'SegmentTemplate');\n        const segmentBase = ParserUtils.getFirstChild(elem, 'SegmentBase');\n        const segmentList = ParserUtils.getFirstChild(elem, 'SegmentList');\n        // We only parse video and audio streams!\n        if (contentType !== MediaType.VIDEO && contentType !== MediaType.AUDIO) {\n            return;\n        }\n        if (segmentBase || segmentList) {\n            console.warn('Currently only SegmentTemplate is supported!');\n            return;\n        }\n        if (!segmentTemplate) {\n            console.error('No support for manifest type!');\n            throw new Error('Only DASH manifest with segment template are supported!');\n        }\n        if (this.streamMap_.has(contentType)) {\n            console.warn('Multiple adaptation sets for same content type is not supported...');\n            return;\n        }\n        const representationNodes = ParserUtils.getChildren(elem, 'Representation');\n        const streams = [];\n        for (const representationNode of representationNodes) {\n            const context = {\n                id,\n                mimeType,\n                contentType,\n                codecs,\n                segmentTemplate\n            };\n            const parsed = this.parseRepresentation_(representationNode, context);\n            if (parsed) {\n                streams.push(parsed);\n            }\n        }\n        if (streams.length < 1) {\n            console.error('Empty AdaptationSet!');\n            throw new Error(`Invalid manifest: no represenation found for ${contentType}`);\n        }\n        this.streamMap_.set(contentType, streams);\n    }\n    parseRepresentation_(elem, context) {\n        const originalId = elem.getAttribute('id') || '';\n        const bandwidth = Number(elem.getAttribute('bandwidth'));\n        const width = Number(elem.getAttribute('width'));\n        const height = Number(elem.getAttribute('height'));\n        const codecs = elem.getAttribute('codecs') || context.codecs;\n        const frameRate = Number(elem.getAttribute('frameRate'));\n        const segmentTemplate = ParserUtils.getFirstChild(elem, 'SegmentTemplate') || context.segmentTemplate;\n        const rContext = {\n            id: originalId,\n            bandwidth,\n            adaptationSet: context\n        };\n        const mediaData = this.parseSegmentTemplate_(segmentTemplate, rContext);\n        console.assert(mediaData.mediaSegments.length > 0, 'Should have parsed segments');\n        return {\n            // TODO\n            id: context.contentType + '_' + context.id + '_' + (originalId ? originalId : String(this.globalId_++)),\n            originalId,\n            type: context.contentType,\n            kbps: bandwidth / 1000,\n            width,\n            height,\n            frameRate,\n            codecs,\n            mimeType: context.mimeType,\n            initialization: mediaData.initSegment,\n            segmentIndex: new SegmentIndex(mediaData.mediaSegments)\n        };\n    }\n    parseSegmentTemplate_(elem, context) {\n        // Section 5.3.9.2.2\n        const presentationTimeOffset = Number(elem.getAttribute('presentationTimeOffset'));\n        const timescale = Number(elem.getAttribute('timescale')) || 1;\n        const segmentDuration = Number(elem.getAttribute('duration')) || -1;\n        const initialization = elem.getAttribute('initialization') || '';\n        const media = elem.getAttribute('media') || '';\n        const startNumber = Number(elem.getAttribute('startNumber')) || 1;\n        const segmentTimeline = ParserUtils.getFirstChild(elem, 'SegmentTimeline');\n        const mContext = {\n            startNumber,\n            segmentDuration,\n            timeOffset: presentationTimeOffset,\n            timescale,\n            initializationAttr: initialization,\n            mediaAttr: media,\n            representation: context\n        };\n        // Segment template with timeline.\n        if (segmentTimeline) {\n            return this.createSegmentsFromTimeline_(segmentTimeline, mContext);\n        }\n        return this.createSegmentsFromTemplate_(mContext);\n    }\n    createSegmentsFromTemplate_(context) {\n        console.assert(context.segmentDuration > 0, 'Segment template without timeline should have segment duration');\n        if (!this.presentationDuration_) {\n            throw new Error('Missing presentation duration!');\n        }\n        const segments = [];\n        let position = context.startNumber;\n        let scaledSegmentDuration = context.segmentDuration / context.timescale;\n        let start = 0;\n        let end = scaledSegmentDuration;\n        // TODO\n        this.maxSegmentDuration_ = end - start;\n        while (end < this.presentationDuration_) {\n            const unscaledStart = start * context.timescale;\n            const unscaledEnd = end * context.timescale;\n            segments.push({\n                start,\n                end,\n                duration: end - start,\n                unscaledStart,\n                unscaledEnd,\n                unscaledDuration: unscaledEnd - unscaledStart,\n                isInit: false,\n                url: ParserUtils.resolveTemplateUrl(context.mediaAttr, {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth,\n                    time: unscaledStart,\n                    number: position\n                }, this.manifestUrl_)\n            });\n            start = end;\n            end = Math.min(this.presentationDuration_, (end + scaledSegmentDuration));\n            ++position;\n        }\n        console.assert(segments.length > 0, 'Should have segments!!!');\n        return {\n            initSegment: {\n                start: 0,\n                end: 0,\n                duration: 0,\n                unscaledStart: 0,\n                unscaledEnd: 0,\n                unscaledDuration: 0,\n                isInit: true,\n                url: ParserUtils.resolveTemplateUrl(context.initializationAttr, // Init Url template\n                {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth\n                }, this.manifestUrl_)\n            },\n            mediaSegments: segments\n        };\n    }\n    createSegmentsFromTimeline_(elem, context) {\n        // Section 5.3.9.6\n        const sNodes = ParserUtils.getChildren(elem, 'S');\n        const mediaSegments = [];\n        for (const sNode of sNodes) {\n            let d = Number(sNode.getAttribute('d'));\n            let r = Number(sNode.getAttribute('r'));\n            let t = null;\n            let scaledT = null;\n            let scaledD = d / context.timescale;\n            // TODO - Assert has duration\n            if (sNode.hasAttribute('t')) {\n                t = Number(sNode.getAttribute('t')) - context.timeOffset;\n            }\n            else if (mediaSegments.length === 0) {\n                // If @t not present, then the value shall be assumed zero for the\n                // first S element.\n                t = 0;\n            }\n            else {\n                // If @t not present, and not the first S element then the value\n                // shall be assumed to be the sum of the previous S element's earliest\n                // presentation time and contiguous duration i.e. end time for previous\n                // segment.\n                const lastSegment = mediaSegments[mediaSegments.length - 1];\n                t = lastSegment.unscaledStart + lastSegment.unscaledDuration;\n            }\n            const unscaledEnd = t + d;\n            scaledT = t / context.timescale;\n            // TODO - Check for discontinuity\n            if (this.maxSegmentDuration_ < scaledD) {\n                this.maxSegmentDuration_ = scaledD;\n            }\n            mediaSegments.push({\n                start: scaledT,\n                end: unscaledEnd / context.timescale,\n                duration: scaledD,\n                unscaledStart: t,\n                unscaledEnd,\n                unscaledDuration: d,\n                isInit: false,\n                url: ParserUtils.resolveTemplateUrl(context.mediaAttr, // url template\n                { bandwidth: context.representation.bandwidth, time: t }, this.manifestUrl_)\n            });\n            if (r < -1) {\n                console.warn('Negative repeat count not supported at the moment');\n            }\n            if (r > 0) {\n                for (let i = 0; i <= r; i++) {\n                    const lastSegment = mediaSegments[mediaSegments.length - 1];\n                    const nextStartUnscaled = lastSegment.unscaledEnd;\n                    const nextEndUnscaled = nextStartUnscaled + d;\n                    mediaSegments.push({\n                        start: lastSegment.end,\n                        end: nextEndUnscaled / context.timescale,\n                        duration: scaledD,\n                        unscaledStart: nextStartUnscaled,\n                        unscaledEnd: nextEndUnscaled,\n                        unscaledDuration: d,\n                        isInit: false,\n                        url: ParserUtils.resolveTemplateUrl(context.mediaAttr, {\n                            bandwidth: context.representation.bandwidth,\n                            time: nextStartUnscaled\n                        }, this.manifestUrl_)\n                    });\n                }\n            }\n        }\n        return {\n            initSegment: {\n                start: 0,\n                end: 0,\n                duration: 0,\n                unscaledStart: 0,\n                unscaledEnd: 0,\n                unscaledDuration: 0,\n                isInit: true,\n                url: ParserUtils.resolveTemplateUrl(context.initializationAttr, // Init Url template\n                {\n                    representationId: context.representation.id,\n                    bandwidth: context.representation.bandwidth\n                }, this.manifestUrl_)\n            },\n            mediaSegments\n        };\n    }\n    refreshManifest_() {\n        return manifest_parser_awaiter(this, void 0, void 0, function* () {\n            if (!this.manifest_)\n                return;\n            console.log('Refreshing manifest...');\n            try {\n                const newManifest = yield this.loadAndParseManifest_();\n                // TODO\n                this.manifest_.dvrWindowLength = newManifest.dvrWindowLength;\n                this.manifest_.minUpdatePeriod = newManifest.minUpdatePeriod;\n                // Update streams\n                if (this.manifest_.video && newManifest.video) {\n                    this.updateStreams_(this.manifest_.video, newManifest.video, this.manifest_.dvrWindowLength);\n                }\n                if (this.manifest_.audio && newManifest.audio) {\n                    this.updateStreams_(this.manifest_.audio, newManifest.audio, this.manifest_.dvrWindowLength);\n                }\n                // TODO: Notify new manifest?\n                // Schedule next update\n                this.refreshTimer_.tickAfter(this.manifest_.minUpdatePeriod);\n            }\n            catch (error) {\n                console.error('Failed to refresh manifest, retrying...', error);\n                // Retry\n                this.refreshTimer_.tickAfter(0);\n            }\n        });\n    }\n    updateStreams_(oldStreams, newStreams, dvrWindowLength) {\n        console.assert(oldStreams.length === newStreams.length, 'Stream count missmatch after manifest update!');\n        // TODO\n        // Improve the stream mapping. For simplicity sake we will assume, for\n        // now, that streams appears in each manifest in the same order and\n        // in the same amount i.e. we assume an 1:1 mapping with the new\n        // manifest.\n        for (let i = 0; i < oldStreams.length; i++) {\n            const newSegments = newStreams[i].segmentIndex.getSegments();\n            oldStreams[i].segmentIndex.merge(newSegments);\n            // Adjust DVR window\n            if (dvrWindowLength) {\n                oldStreams[i].segmentIndex.adjustDvrWindow(dvrWindowLength);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/player.ts\nvar player_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n/**\n * A minimal MPEG-DASH player.\n */\nclass Player {\n    constructor(video) {\n        this.manifestUrl_ = '';\n        this.manifest_ = null;\n        this.parser_ = null;\n        this.mse_ = null;\n        this.streamer_ = null;\n        this.video_ = video;\n    }\n    /**\n     * Loads and play the provided content.\n     *\n     * @param streamUrl The content URL.\n     * @return Promise.\n     */\n    load(streamUrl) {\n        return player_awaiter(this, void 0, void 0, function* () {\n            this.manifestUrl_ = streamUrl;\n            this.parser_ = new ManifestParser();\n            this.mse_ = new MseAdapter(this.video_);\n            this.streamer_ = new Streamer(this.mse_, this.getPresentationImpl_());\n            this.manifest_ = yield this.parser_.start(this.manifestUrl_);\n            const initStreams = new Map();\n            initStreams.set(MediaType.VIDEO, this.pickHighestKbps_(this.manifest_.video));\n            initStreams.set(MediaType.AUDIO, this.pickHighestKbps_(this.manifest_.audio));\n            yield this.streamer_.setup(initStreams);\n            const streamingStarted = yield this.streamer_.start();\n            if (streamingStarted) {\n                this.video_.play();\n            }\n            else {\n                console.error('Could not start streaming!');\n                throw Error('Streaming Start failed');\n            }\n        });\n    }\n    /**\n     * Stops the player.\n     */\n    stop() {\n        return player_awaiter(this, void 0, void 0, function* () {\n            if (this.parser_) {\n                this.parser_.stop();\n                this.parser_ = null;\n            }\n            if (this.streamer_) {\n                this.streamer_.stop();\n            }\n            if (this.mse_) {\n                this.mse_ = null;\n            }\n        });\n    }\n    /**\n     * Get all video tracks.\n     * @returns All available video tracks\n     */\n    getAllVideo() {\n        if (this.manifest_ && this.manifest_.video.length > 0) {\n            return this.manifest_.video.map(video => this.getPublicVideo_(video));\n        }\n        return [];\n    }\n    /**\n     * Get all audio tracks.\n     * @returns All available audio tracks.\n     */\n    getAllAudio() {\n        if (this.manifest_ && this.manifest_.audio.length > 0) {\n            return this.manifest_.audio.map(audio => this.getPublicAudio_(audio));\n        }\n        return [];\n    }\n    /**\n     * Get the active (currently buffering) video stream.\n     * @returns The currently active video stream or null.\n     */\n    getActiveVideo() {\n        var _a;\n        const active = ((_a = this.streamer_) === null || _a === void 0 ? void 0 : _a.getActiveStream(MediaType.VIDEO)) || null;\n        if (active) {\n            return this.getPublicVideo_(active);\n        }\n        return active;\n    }\n    /**\n     * Get the active (currently buffering) audio stream.\n     * @returns The currently active audio stream or null.\n     */\n    getActiveAudio() {\n        var _a;\n        const active = ((_a = this.streamer_) === null || _a === void 0 ? void 0 : _a.getActiveStream(MediaType.AUDIO)) || null;\n        if (active) {\n            return this.getPublicAudio_(active);\n        }\n        return null;\n    }\n    isLive() {\n        if (this.manifest_ && this.manifest_.type === StreamType.LIVE) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @returns An implementation of IPresentation.\n     */\n    getPresentationImpl_() {\n        return {\n            isLive: () => this.isLive(),\n            getStartTime: () => (this.manifest_ && this.manifest_.startTime) || 0,\n            getMaxSegmentDuration: () => {\n                if (this.manifest_) {\n                    return this.manifest_.maxSegmentDuration;\n                }\n                return 0;\n            },\n            getDelay: () => {\n                if (this.manifest_) {\n                    return this.manifest_.delay;\n                }\n                return 0;\n            },\n            getPosition: () => this.video_.currentTime || 0,\n            getDuration: () => {\n                if (this.manifest_) {\n                    return this.manifest_.duration;\n                }\n                return 0;\n            }\n        };\n    }\n    pickHighestKbps_(streams) {\n        return streams.reduce((s1, s2) => (s1.kbps > s2.kbps) ? s1 : s2);\n    }\n    getPublicVideo_(video) {\n        return {\n            id: video.id,\n            originalId: video.originalId,\n            type: video.type,\n            kbps: video.kbps,\n            codecs: video.codecs,\n            mimeType: video.mimeType,\n            width: video.width,\n            height: video.height,\n            frameRate: video.frameRate\n        };\n    }\n    getPublicAudio_(audio) {\n        return {\n            id: audio.id,\n            originalId: audio.originalId,\n            type: audio.type,\n            kbps: audio.kbps,\n            codecs: audio.codecs,\n            mimeType: audio.mimeType\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\nconst lib = {\n    Player: Player\n};\n/* harmony default export */ const src = (lib);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///743\n")}},__webpack_require__={d:(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},o:(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U)},__webpack_exports__={};return __webpack_modules__[743](0,__webpack_exports__,__webpack_require__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));